(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1552],{14203:(e,n,t)=>{"use strict";t.d(n,{O:()=>i});var a=t(1029);let i="\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat permute(float x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat taylorInvSqrt(float r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n\n\n\n\n// 2D:\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n		+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// 3D: \n\nfloat snoise(vec3 v)\n{ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n// 4D:\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n						\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v) {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n  // First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n  // Other corners\n\n  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n  //  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n  //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n  // Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n  // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n  // Mix contributions from the five corners\n  vec3 m0 = max(0.57 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.57 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 60.1 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n\n\n\n// addons:\n// Fractal noise, based on Stefan Gustavson's Simplex noise\n".concat((0,a.N)(["vec2","vec3","vec4"],"\n  float fnoise(T p, int octaves, float persistence) {\n    float total = 0.0;           // Final noise value\n    float amplitude = 1.0;       // Initial amplitude\n    float frequency = 1.0;       // Initial frequency\n    float maxValue = 0.0;        // Used for normalization\n\n    for (int i = 0; i < octaves; i++) {\n      total += snoise(p * frequency) * amplitude;\n\n      maxValue += amplitude;   // Keep track of max amplitude\n      amplitude *= persistence; // Reduce amplitude for next octave\n      frequency *= 2.0;        // Increase frequency for next octave\n    }\n\n    // Normalize the result to stay within the range [0, 1]\n    return total / maxValue;\n  }\n\n  float fnoise(T p, int octaves) {\n    return fnoise(p, octaves, 0.5);\n  }\n\n  float fnoise(T p) {\n    return fnoise(p, 4, 0.5);\n  }\n"),"\n\nfloat snoiseFast4D(vec4 p) {\n  const float SCALAR = 0.01;\n  float a = SCALAR * dot(p.xy * 0.3, vec2(-127.1, 311.7));\n  float b = SCALAR * dot(p.zw * 0.8, vec2(269.5, -183.3));\n  float c = SCALAR * dot(p.wx * 6.0, vec2(23.14069, 2.665157));\n  float d = SCALAR * dot(p.zy * 1.3, vec2(-12.9898, 78.233));\n  return (snoise(vec2(a, b)) + snoise(vec2(d, c))) * 0.5;\n}\n\nfloat fnoiseFast4D(vec4 p, int octaves, float persistence) {\n  float total = 0.0;           // Final noise value\n  float amplitude = 1.0;       // Initial amplitude\n  float frequency = 1.0;       // Initial frequency\n  float maxValue = 0.0;        // Used for normalization\n\n  for (int i = 0; i < octaves; i++) {\n    total += snoiseFast4D(p * frequency) * amplitude;\n\n    maxValue += amplitude;   // Keep track of max amplitude\n    amplitude *= persistence; // Reduce amplitude for next octave\n    frequency *= 2.0;        // Increase frequency for next octave\n  }\n\n  // Normalize the result to stay within the range [0, 1]\n  return total / maxValue;\n}\n")},19264:(e,n,t)=>{"use strict";t.r(n),t.d(n,{ResponsiveProvider:()=>c,useResponsive:()=>r});var a=t(70691),i=t(67203),o=t(74245);let l=(0,i.createContext)(null);function r(){let e=(0,i.useContext)(l);if(!e)throw Error("useResponsive must be used within a ResponsiveProvider");return e}class s{constructor(){this.responsive=new o.Ft,this.frameId=-1,this.update=()=>{this.frameId=window.requestAnimationFrame(this.update);let{innerWidth:e,innerHeight:n}=window,{layoutObs:t,viewportObs:a}=this.responsive,i=navigator.maxTouchPoints>0?o.gm.Touch:o.gm.Mouse;if(e!==a.value.width||n!==a.value.height||i!==t.value.pointerType){for(let l of(a.mutate({width:e,height:n}),t.enqueueMutation(a.value.computeLayout()),t.enqueueMutation({pointerType:i}),t.flushMutations(),document.documentElement.style.setProperty("--viewport-width","".concat(e,"px")),document.documentElement.style.setProperty("--viewport-height","".concat(n,"px")),Object.values(o.Gy)))document.documentElement.classList.toggle(l,t.value.screenSize===l);for(let e of Object.values(o.t4))document.documentElement.classList.toggle(e,t.value.orientation===e);for(let e of Object.values(o.gm))document.documentElement.classList.toggle(e,t.value.pointerType===e)}},this.destroy=()=>{window.cancelAnimationFrame(this.frameId)},this.update()}}function c(e){let{children:n}=e,t=(0,i.useMemo)(()=>new s,[]);return(0,i.useEffect)(()=>t.destroy),(0,a.jsx)(l.Provider,{value:t.responsive,children:n})}},21264:(e,n,t)=>{"use strict";t.d(n,{RDiv:()=>r});var a=t(70691),i=t(36575),o=t(67941);let l=new Set(["className","style"]);function r(e){let{mobile:n,desktop:t,tablet:r,...s}=e,c=(0,o.Qs)(),C=(0,i.A)(c.layoutObs),u={...s},x={mobile:n,desktop:t,tablet:r}[C.screenSize];if(x)for(let e of Object.keys(x)){if(!1===l.has(e)){console.warn("RDiv does not support overriding '".concat(e,"' (for the moment?)"));continue}switch(e){case"className":var p,v,d,f;let n=new Set(null!=(d=null==(p=s.className)?void 0:p.split(/\s+/))?d:[]),t=new Set(null!=(f=null==(v=x.className)?void 0:v.split(/\s+/))?f:[]);for(let e of t)if(e.startsWith("p-"))for(let e of n)e.startsWith("p-")&&n.delete(e);u.className=[...n,...t].join(" ");break;case"style":u.style={...u.style,...x.style}}}return(0,a.jsx)("div",{...u})}},22899:(e,n,t)=>{"use strict";t.d(n,{I:()=>o});var a=t(65927);let i=["linear"];for(let e=1;e<=10;e++)i.push("easeIn".concat(e)),i.push("easeOut".concat(e)),i.push("easeInOut".concat(e)),i.push("easeOutIn".concat(e));let o="\n#ifndef GLSL_EASING\n#define GLSL_EASING\n\n".concat(a.S,"\n\nfloat easePow1(float x) {\n  return x;\n}\n\nfloat easePow2(float x) {\n  return x * x;\n}\n\nfloat easePow3(float x) {\n  return x * x * x;\n}\n\nfloat easePow4(float x) {\n  x *= x;\n  return x *= x;\n}\n\nfloat easePow5(float x) {\n  float x0 = x;\n  x *= x;\n  x *= x;\n  return x0 * x;\n}\n\nfloat easePow6(float x) {\n  x *= x * x;\n  return x *= x;\n}\n\nfloat easePow7(float x) {\n  float x0 = x;\n  x *= x * x;\n  x *= x;\n  return x0 * x;\n}\n\nfloat easePow8(float x) {\n  x *= x;\n  x *= x;\n  return x *= x;\n}\n\nfloat easePow9(float x) {\n  x *= x * x;\n  return x *= x * x;\n}\n\nfloat easePow10(float x) {\n  float x0 = x;\n  x *= x * x;\n  x *= x * x;\n  return x0 * x;\n}\n\nfloat linear(float x) {\n  return clamp01(x);\n}\n\n").concat(Array.from({length:10},(e,n)=>{let t=n+1;return"\n\n  float easeIn".concat(t," (float x) {\n    return easePow").concat(t,"(clamp01(x));\n  }\n  float easeOut").concat(t," (float x) {\n    return 1.0 - easePow").concat(t,"(clamp01(1.0 - x));\n  }\n  float easeInOut").concat(t," (float x) {\n    return x < 0.5 \n      ? 0.5 * easePow").concat(t,"(2.0 * x) \n      : 1.0 - 0.5 * easePow").concat(t,"(2.0 * (1.0 - x));\n  }\n  float easeOutIn").concat(t," (float x) {\n    return x < 0.5\n      ? 0.5 * (1.0 - easePow").concat(t,"(1.0 - x * 2.0))\n      : 1.0 - 0.5 * (1.0 - easePow").concat(t,"(2.0 * x - 1.0));\n  }\n\n").trim()}).join("\n\n"),"\n\n\n// https://www.desmos.com/calculator/mqou4lf9zc?lang=fr\nfloat easeInOut(float x, float p, float i) {\n  return  x <= 0.0 ? 0.0 :\n          x >= 1.0 ? 1.0 :\n          x <= i ? 1.0 / pow(i, p - 1.0) * pow(x, p) :\n          1.0 - 1.0 / pow(1.0 - i, p - 1.0) * pow(1.0 - x, p);\n}\n\n// https://www.desmos.com/calculator/nrjlezusdv\nfloat easeInThenOut(float x, float p) {\n  return 1.0 - pow(abs(2.0 * x - 1.0), p);\n}\n\n#endif\n")},52288:()=>{},55227:(e,n,t)=>{"use strict";t.d(n,{M:()=>l});var a=t(22899),i=t(1029);let o="\n\nstruct FloatRamp {\n  float a;\n  float b;\n  float t;\n};\n\nstruct Vec2Ramp {\n  vec2 a;\n  vec2 b;\n  float t;\n};\n\nstruct Vec3Ramp {\n  vec3 a;\n  vec3 b;\n  float t;\n};\n\nstruct Vec4Ramp {\n  vec4 a;\n  vec4 b;\n  float t;\n};\n\n".concat((0,i.N)("vecX",e=>{let n=e[0].toUpperCase()+e.slice(1)+"Ramp";return"\n\n// 1 stop (simple linear interpolation)\n".concat(n," ramp(float t, T a, T b) {\n  return ").concat(n,"(a, b, t);\n}\n\n// 2 stops\n").concat(n," ramp(float t, T a, T b, T c) {\n  if (t < 0.5) {\n    return ").concat(n,"(a, b, t * 2.0);\n  } else {\n    return ").concat(n,"(b, c, t * 2.0 - 1.0);\n  }\n}\n\n// 4 stops\n").concat(n," ramp(float t, T a, T b, T c, T d) {\n  if (t < 0.333) {\n    return ").concat(n,"(a, b, t * 3.0);\n  } else if (t < 0.666) {\n    return ").concat(n,"(b, c, t * 3.0 - 1.0);\n  } else {\n    return ").concat(n,"(c, d, t * 3.0 - 2.0);\n  }\n}\n\n// 5 stops\n").concat(n," ramp(float t, T a, T b, T c, T d, T e) {\n  if (t < 0.25) {\n    return ").concat(n,"(a, b, t * 4.0);\n  } else if (t < 0.5) {\n    return ").concat(n,"(b, c, t * 4.0 - 1.0);\n  } else if (t < 0.75) {\n    return ").concat(n,"(c, d, t * 4.0 - 2.0);\n  } else {\n    return ").concat(n,"(d, e, t * 4.0 - 3.0);\n  }\n}\n\n").slice(1,-1)})),l="\n#ifndef GLSL_RAMP\n#define GLSL_RAMP\n".concat(a.I,"\n").concat(o,"\n#endif\n")},61572:(e,n,t)=>{"use strict";t.d(n,{S:()=>l});var a=t(49797),i=t(13565);let o={...i.q.defaultParams,size:512,viscosity:.98,cellScale:1,damping:.98};class l extends i.q{get viscosity(){return this.updateUniforms.uViscosity.value}set viscosity(e){this.updateUniforms.uViscosity.value=e}get cellScale(){return this.updateUniforms.uCellScale.value}set cellScale(e){this.updateUniforms.uCellScale.value=e}get damping(){return this.updateUniforms.uDamping.value}set damping(e){this.updateUniforms.uDamping.value=e}pointer(e,n,t,a){let{uPointer:i}=this.updateUniforms;i.value.set(e,n,t,a)}constructor(e){super({filter:"linear",...e}),this.shaders({initial:{fragmentColor:"\n          gl_FragColor.rgb = vec3(0.0);\n          gl_FragColor.a = 1.0;\n        "},update:{uniforms:{uViscosity:{value:this.params.viscosity},uCellScale:{value:this.params.cellScale},uDamping:{value:this.params.damping},uPointer:{value:new a.IUQ(.5,.5,.1,1)}},fragmentTop:"\n          vec4 fetch(vec2 uv) {\n            if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n              return vec4(0.0);\n            }\n            float margin = 0.2;\n            float edgeDist = min(min(uv.x, 1.0 - uv.x), min(uv.y, 1.0 - uv.y));\n            edgeDist = 1.0 - pow(1.0 - edgeDist, 15.0);\n            float edgeFade = smoothstep(0.0, margin, edgeDist);\n            return texture2D(uTexture, uv) * edgeFade;\n          }\n        ",fragmentColor:"\n          vec2 uv = vUv;\n          float viscosity = uViscosity;\n          vec2 cellSize = uCellScale / uTextureSize;\n\n          vec4 center = fetch(uv);\n          vec4 north = fetch(uv + vec2(0.0, cellSize.y));\n          vec4 south = fetch(uv - vec2(0.0, cellSize.y));\n          vec4 east = fetch(uv + vec2(cellSize.x, 0.0));\n          vec4 west = fetch(uv - vec2(cellSize.x, 0.0));\n\n          // x: previous height\n          // y: penultimate height\n          // z: unused\n          // w: unused\n\n          float newHeight = ((north.x + south.x + east.x + west.x) * 0.5 - center.y) * viscosity;\n\n          // Pointer influence\n          float radius = uPointer.z;\n          float strength = uPointer.w;\n          float dist = distance(uv * uTextureSize, uPointer.xy * uTextureSize) - radius;\n          float cellLength = length(cellSize);\n          float influence = smoothstep(cellLength * 0.5, -cellLength * 0.5, dist);\n          newHeight += influence * strength;\n\n          // Damping\n          newHeight *= uDamping;\n          center.x *= uDamping;\n\n          gl_FragColor = vec4(newHeight, center.x, 0.0, 1.0);\n        "}})}}l.defaultParams=o},67941:(e,n,t)=>{"use strict";t.d(n,{Qs:()=>a.useResponsive});var a=t(19264);t(74245)},74245:(e,n,t)=>{"use strict";t.d(n,{Ft:()=>c,Gy:()=>i,gm:()=>l,t4:()=>o});var a=t(85795),i=function(e){return e.Mobile="mobile",e.Tablet="tablet",e.Desktop="desktop",e}({}),o=function(e){return e.Portrait="portrait",e.Landscape="landscape",e}({}),l=function(e){return e.Touch="touch",e.Mouse="mouse",e}({});class r{constructor(){this.screenSize="desktop",this.orientation="landscape",this.pointerType="mouse"}}class s{get aspect(){return this.width/this.height}computeLayout(){var e,n;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new r;return t.orientation=this.aspect>=1?"landscape":"portrait",e=this.width,this.height,t.screenSize=e<768?"mobile":e<1024?"tablet":"desktop",t}constructor(e,n){this.width=e,this.height=n}}class c{constructor(){this.layoutObs=new a.ObservableTree(new r),this.viewportObs=new a.ObservableTree(new s(1280,1024))}}},77515:(e,n,t)=>{"use strict";t.d(n,{e:()=>y});var a=t(28535),i=t(76999),o=t(57368),l=t(49797),r=t(5832),s=t(33589),c=new WeakMap;class C extends l.Nv2{dispose(){!(0,a._)(this,c)&&(super.dispose(),(0,o._)(this,c,!0),this.video&&(this.video.pause(),this.video.src="",this.video.parentNode&&this.video.parentNode.removeChild(this.video),this.video=null))}static fromUrl(e){let{loop:n=!0,autoplay:t=!0,muted:a=!0}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=document.createElement("video");return i.src=e,i.loop=n,i.autoplay=t,i.muted=a,i.playsInline=!0,i.crossOrigin="anonymous",i.play(),new C(i)}constructor(e){super(e),(0,i._)(this,c,{writable:!0,value:void 0}),this.video=e,(0,o._)(this,c,!1)}}let u={video:["mp4","webm"],srgb:["jpg","jpeg","png","webp"],linear:["hdr","exr"]},x=e=>u.srgb.includes(e),p=e=>u.linear.includes(e),v=e=>u.video.includes(e),d=e=>x(e)||p(e);var f=new WeakMap,m=new WeakMap;class h{loadTexture(e,n){var t,i,c;let u,x,d=new URL(e,window.location.href).pathname.split("/").pop()||"unknown",h=null==(t=d.match(/[^.]+$/))?void 0:t[0];if(void 0===h)throw Error("No extension found in url: ".concat(e));if(v(h)){let n=(0,s.F)(C.fromUrl(e));return n.video.onloadedmetadata=()=>{n.image.width=n.video.videoWidth,n.image.height=n.video.videoHeight,n.resolve()},n.name=d,n}let y=(p(h)?(0,o._)(this,m,null!=(i=(0,a._)(this,m))?i:new r.Y):(0,o._)(this,f,null!=(c=(0,a._)(this,f))?c:new l.Tap)).load(e,e=>{var t;e.name=d,e.colorSpace=null!=(t=null==n?void 0:n.colorSpace)?t:p(h)?l.Zr2:l.er$,g(),u(e)},void 0,()=>{g();let n=Error("Cannot load texture (NOT FOUND?): ".concat(e));x(n)}),w=new Promise((e,n)=>{u=e,x=n});Object.assign(y,{then:w.then.bind(w),catch:w.catch.bind(w),finally:w.finally.bind(w)});let g=()=>{delete y.then,delete y.catch,delete y.finally};return y}load(e){var n;let t=null==(n=e.match(/[^.]+$/))?void 0:n[0];if(void 0===t)throw Error("No extension found in url: ".concat(e));if(d(t))return this.loadTexture(e);throw Error("Unsupported extension: ".concat(e))}constructor(){(0,i._)(this,f,{writable:!0,value:void 0}),(0,i._)(this,m,{writable:!0,value:void 0}),(0,o._)(this,f,null),(0,o._)(this,m,null)}}let y=new h},85193:(e,n,t)=>{"use strict";t.d(n,{MyScene:()=>M});var a=t(33540),i=t(77794),o=t(79911),l=t(49797),r=t(79782),s=t(38921),c=t(63106),C=t(31763),u=t(61572),x=t(77515),p=t(7147),v=t(73446),d=t(22899),f=t(55227),m=t(14203),h=t(8144),y=t(79285),w=t(67235),g=t(33589);function b(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:512,a=new Blob([e],{type:"image/svg+xml"}),i=URL.createObjectURL(a),o=new Image,r=document.createElement("canvas");r.width=n,r.height=t;let s=r.getContext("2d"),c=new l.GYF(new Uint8Array(64).fill(255),4,4);c.generateMipmaps=!0,c.minFilter=l.NZq,c.magFilter=l.k6q;let C=(0,g.F)(c);return o.onload=()=>{s.transform(1,0,0,-1,0,t),s.drawImage(o,0,0,n,t),URL.revokeObjectURL(i),C.image={data:s.getImageData(0,0,n,t).data,width:n,height:t},C.needsUpdate=!0,C.resolve()},o.onerror=e=>{C.reject(e)},o.src=i,C}function H(e,n,t){return null!=t||(t=new l.I9Y),e>1?(t.x=n,t.y=n/e):(t.x=n*e,t.y=n),t}class V extends l.YJl{*initialize(e,n){let t=new l.I9Y,a=H(1,e.aspect>=1?360:240),i=new u.S({size:a,viscosity:.995,damping:1}).initialize(e.renderer),r=(0,o.mj)(new l.eaF(new l.bdM,new l.V9B),this),s={uTime:{value:0},uViewportSize:{value:new l.I9Y},uWaterMap:{value:i.currentTexture()},uImageFill:{value:this.imageFill},uImageStroke:{value:this.imageStroke},uScale:{value:.7},uNormalMap:{value:x.e.loadTexture("../assets/textures/paper002_1K_NormalGL.jpg")}};s.uNormalMap.value.wrapS=s.uNormalMap.value.wrapT=l.GJx,r.material.onBeforeCompile=e=>p.bI.with(e).uniforms(s).defines({USE_UV:""}).fragment.top(h.H,f.M,v.x,m.O,d.I,"\n#ifndef GLSL_TEXTURE_BICUBIC\n#define GLSL_TEXTURE_BICUBIC\n\nvec4 cubic(float v){\n  vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\n  vec4 s = n * n * n;\n  float x = s.x;\n  float y = s.y - 4.0 * s.x;\n  float z = s.z - 4.0 * s.y + 6.0 * s.x;\n  float w = 6.0 - x - y - z;\n  return vec4(x, y, z, w) * (1.0/6.0);\n}\n\nvec4 textureBicubic(sampler2D sampler, vec2 texCoords){\n\n  vec2 texSize = vec2(textureSize(sampler, 0));\n  vec2 invTexSize = 1.0 / texSize;\n  \n  texCoords = texCoords * texSize - 0.5;\n   \n  vec2 fxy = fract(texCoords);\n  texCoords -= fxy;\n\n  vec4 xcubic = cubic(fxy.x);\n  vec4 ycubic = cubic(fxy.y);\n\n  vec4 c = texCoords.xxyy + vec2 (-0.5, +1.5).xyxy;\n  \n  vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);\n  vec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;\n  \n  offset *= invTexSize.xxyy;\n  \n  vec4 sample0 = texture(sampler, offset.xz);\n  vec4 sample1 = texture(sampler, offset.yz);\n  vec4 sample2 = texture(sampler, offset.xw);\n  vec4 sample3 = texture(sampler, offset.yw);\n\n  float sx = s.x / (s.x + s.y);\n  float sy = s.z / (s.z + s.w);\n\n  return mix(\n    mix(sample3, sample2, sx), \n    mix(sample1, sample0, sx), \n    sy);\n}\n#endif\n").fragment.after("map_fragment","\n        float aspect = uViewportSize.x / uViewportSize.y;\n        // vec2 imageUv = (vUv - 0.5) / vec2(1.0, aspect) + 0.5;\n        vec2 imageUv = (vUv - 0.5) * vec2(aspect, 1.0) / uScale + 0.5;\n        vec4 stroke = texture2D(uImageStroke, imageUv);\n        vec4 fill = texture2D(uImageFill, imageUv);\n        float inside = mix(0.0, 1.0, max(stroke.a, fill.a));\n\n        // water is sampled with bicubic filtering for smoother look\n        vec4 water = textureBicubic(uWaterMap, vUv + 0.05 * inside);\n\n        float variation = spow(water.r * 0.1, 5.0) / 400.0;\n        variation = slimited(variation, 1.0);\n        Vec3Ramp r = ramp(0.5 + variation * 0.5, \n          ".concat((0,p.eR)("#ff773dff")," * 4.0, \n          ").concat((0,p.eR)("#eadc73ff"),", \n          ").concat((0,p.eR)("#000000"),", \n          ").concat((0,p.eR)("#c3ff7aff"),",\n          ").concat((0,p.eR)("#71ebcaff")," * 1.5);\n        diffuseColor.rgb = mix(r.a, r.b, r.t);\n\n        // Add some fake lighting\n        vec2 normalUvOffset = vec2(hash(uTime), hash(uTime * 2.0));\n        vec3 normalMap = texture2D(uNormalMap, imageUv * 1.0 + normalUvOffset).xyz * 2.0 - 1.0;\n        normalMap.y *= -1.0;\n        vec3 normal = normalize(vec3(normalMap.xy, 1.0));\n        vec3 lightDir = normalize(vec3(-1.0, 1.0, -1.0));\n        float light = clamp01(dot(normal, lightDir) * 0.5 + 0.5);\n        float dimLight = easeInOut(light, 10.0, 0.95) * oneMinus(length(imageUv - 0.5));\n        diffuseColor.rgb *= vec3(1.0 - dimLight * 150.0);\n        diffuseColor.rgb += dimLight;\n\n        float strokeVisibilityIdle = pow(inverseLerp(-1.2, 1.0, snoise(vec3(imageUv * 0.8, uTime * 0.2))) \n          * inverseLerp(-1.2, 1.0, snoise(vec3(imageUv * 1.8 + 1.2, uTime * 0.2))), 2.0);\n        float strokeVisibilityMove = clamp01(pow(abs(water.r) * 0.2, 8.0) * 0.05);\n        float strokeVisibility = stroke.a * max(strokeVisibilityIdle, strokeVisibilityMove);\n        diffuseColor.rgb = screenBlending(diffuseColor.rgb, vec3(1.0) * strokeVisibility);\n\n        diffuseColor.rgb = pow(oneMinus(diffuseColor.rgb), vec3(6.0));\n        diffuseColor.rgb *= vec3(oneMinus(pow(oneMinus(light), 1.75)));\n\n        diffuseColor.a = 1.0;\n      "));let g=w.Q.send(C.n).assertPayload();yield(0,c.a)([[{code:"Space"},()=>this.state.playing=!this.state.playing],[{code:/Arrow/},()=>this.state.nextFrame=!0]]);let b=new l.Pq0,V=e.pointer.intersectPlane("xy",{oldFactor:1}).clone(),z=e.pointer.intersectPlane("xy",{oldFactor:0}).clone();return yield e.onTick(o=>{if(!1===this.state.playing&&!1===this.state.nextFrame)return;this.state.nextFrame=!1;let l=e.aspect>=1?1:.7;s.uScale.value=l,s.uTime.value+=o.deltaTime;let{realSize:c}=g.dampedVertigo.state;s.uViewportSize.value.set(c.width,c.height),i.damping=e.pointer.buttonDown()?1:.995,V.copy(e.pointer.intersectPlane("xy",{oldFactor:1})),z.copy(e.pointer.intersectPlane("xy",{oldFactor:0})),V.intersected&&z.intersected?b.subVectors(z.point,V.point):b.set(0,0,0);let C=(0,y.clamp)(b.length()/o.deltaTime,0,50),u=Math.round(80/e.averageFps);for(let l=0;l<u;l++){let r=e.pointer.intersectPlane("xy",{oldFactor:l/u});r.intersected&&t.set((0,y.inverseLerp)(-c.width/2,c.width/2,r.point.x),(0,y.inverseLerp)(-c.height/2,c.height/2,r.point.y));let s=e.aspect>=1?360:240;H(c.x/c.y,s,a);let x="touch"===n.layoutObs.value.pointerType,p=x||e.pointer.buttonDown()?s/10:(0,y.lerpUnclamped)(0,s/4,(0,y.inverseLerpUnclamped)(3,40,C)),v=x?+!!e.pointer.buttonDown():1;i.setSize(a),i.pointer(t.x,t.y,p,-v),i.update(o.deltaTime/u)}s.uWaterMap.value=i.currentTexture(),r.scale.set(c.width,c.height,1)}),this}constructor(){super(),this.state={playing:!0,nextFrame:!1},this.name="home-text";let e=new r.c().parse('\n<svg width="1024" height="1024" viewBox="0 0 1024 1024" fill="none"\n  xmlns="http://www.w3.org/2000/svg">\n  <g id="homeTextSvg">\n    \x3c!-- <rect width="1024" height="1024" fill="white"/> --\x3e\n    <g id="visual">\n      <path d="M102.256 493.033L36.0723 275.8H77.8723L123.472 431.283H124.739L169.706 275.8H209.289L143.106 493.033H102.256Z" fill="black"/>\n      <path d="M225.083 493.033V275.8H265.616V493.033H225.083Z" fill="black"/>\n      <path d="M365.853 496.833C352.553 496.833 340.203 494.3 328.803 489.233C317.403 484.167 308.22 476.672 301.253 466.75C294.287 456.617 290.803 444.161 290.803 429.383C290.803 428.117 290.803 426.85 290.803 425.583C291.015 424.317 291.12 423.261 291.12 422.417H333.237C333.237 422.628 333.131 423.367 332.92 424.633C332.92 425.689 332.92 426.639 332.92 427.483C332.92 437.828 335.981 446.167 342.103 452.5C348.226 458.833 356.776 462 367.753 462C379.998 462 388.548 459.361 393.403 454.083C398.259 448.594 400.687 442.683 400.687 436.35C400.687 428.961 398.787 423.05 394.987 418.617C391.187 414.183 386.12 410.594 379.787 407.85C373.665 404.894 366.803 402.256 359.203 399.933C351.815 397.611 344.32 394.972 336.72 392.017C329.12 389.061 322.153 385.261 315.82 380.617C309.698 375.761 304.737 369.533 300.937 361.933C297.137 354.333 295.237 344.622 295.237 332.8C295.237 319.078 298.615 307.783 305.37 298.917C312.126 289.839 320.992 283.083 331.97 278.65C343.159 274.217 355.087 272 367.753 272C380.631 272 392.348 274.217 402.903 278.65C413.67 283.083 422.22 290.05 428.553 299.55C435.098 308.839 438.37 320.978 438.37 335.967V339.767H396.887V336.917C396.887 327.628 394.248 320.344 388.97 315.067C383.903 309.578 376.726 306.833 367.437 306.833C357.726 306.833 350.231 309.05 344.953 313.483C339.676 317.706 337.037 323.194 337.037 329.95C337.037 336.283 338.937 341.35 342.737 345.15C346.537 348.95 351.498 352.117 357.62 354.65C363.953 357.183 370.92 359.611 378.52 361.933C386.12 364.044 393.615 366.578 401.003 369.533C408.603 372.489 415.465 376.394 421.587 381.25C427.92 385.894 432.987 392.017 436.787 399.617C440.587 407.006 442.487 416.4 442.487 427.8C442.487 444.478 439.215 457.883 432.67 468.017C426.126 477.939 417.048 485.222 405.437 489.867C394.037 494.511 380.842 496.833 365.853 496.833Z" fill="black"/>\n      <path d="M548.214 496.833C524.992 496.833 506.731 490.817 493.431 478.783C480.342 466.539 473.797 448.594 473.797 424.95V275.8H514.331V423.683C514.331 436.139 517.286 445.639 523.197 452.183C529.108 458.728 537.447 462 548.214 462C558.981 462 567.319 458.728 573.231 452.183C579.353 445.639 582.414 436.139 582.414 423.683V275.8H622.947V424.95C622.947 448.594 616.297 466.539 602.997 478.783C589.697 490.817 571.436 496.833 548.214 496.833Z" fill="black"/>\n      <path d="M641.883 493.033L711.866 275.8H759.049L829.033 493.033H787.549L774.25 450.283H694.133L681.15 493.033H641.883ZM705.216 414.183H763.166L741.316 341.667C740.261 337.867 739.205 333.644 738.15 329C737.094 324.356 736.25 320.45 735.616 317.283C735.194 313.906 734.983 312.217 734.983 312.217H733.716C733.716 312.217 733.4 314.011 732.766 317.6C732.133 320.978 731.288 324.989 730.233 329.633C729.388 334.278 728.438 338.289 727.383 341.667L705.216 414.183Z" fill="black"/>\n      <path d="M848.285 493.033V275.8H888.819V455.033H980.652V493.033H848.285Z" fill="black"/>\n    </g>\n    <g id="tech">\n      <path d="M226.378 688.033V506.9H172.545V470.8H320.745V506.9H266.912V688.033H226.378Z" fill="black"/>\n      <path d="M344.804 688.033V470.8H483.188V506.9H385.338V558.833H469.254V594.933H385.338V651.933H485.088V688.033H344.804Z" fill="black"/>\n      <path d="M596.198 691.833C568.965 691.833 547.748 682.65 532.548 664.283C517.348 645.917 509.748 617.628 509.748 579.417C509.748 540.994 517.348 512.706 532.548 494.55C547.748 476.183 568.965 467 596.198 467C611.398 467 625.015 469.956 637.048 475.867C649.081 481.778 658.581 490.961 665.548 503.417C672.515 515.872 675.998 531.917 675.998 551.55H634.515C634.515 534.661 630.926 522.206 623.748 514.183C616.781 505.95 607.598 501.833 596.198 501.833C581.209 501.833 570.02 508.061 562.631 520.517C555.242 532.761 551.548 549.756 551.548 571.5V587.333C551.548 609.078 555.348 626.178 562.948 638.633C570.548 650.878 582.054 657 597.465 657C609.287 657 618.681 652.989 625.648 644.967C632.826 636.733 636.415 624.278 636.415 607.6H675.998C675.998 626.6 672.515 642.328 665.548 654.783C658.581 667.239 649.081 676.528 637.048 682.65C625.226 688.772 611.609 691.833 596.198 691.833Z" fill="black"/>\n      <path d="M705.384 688.033V470.8H745.917V558.833H814.317V470.8H854.85V688.033H814.317V594.933H745.917V688.033H705.384Z" fill="black"/>\n      <path d="M888.036 688.033V644.65H931.736V688.033H888.036Z" fill="black"/>\n    </g>\n    <g id="baseline">\n      <path d="M260 752.352V735.888H265.112C267.064 735.888 268.592 736.56 269.696 737.904C270.8 739.232 271.352 741.224 271.352 743.88C271.352 746.696 270.8 748.816 269.696 750.24C268.592 751.648 267.064 752.352 265.112 752.352H260ZM262.112 750.432H264.92C266.216 750.432 267.24 749.944 267.992 748.968C268.76 747.976 269.144 746.48 269.144 744.48V743.28C269.144 741.44 268.76 740.072 267.992 739.176C267.24 738.264 266.216 737.808 264.92 737.808H262.112V750.432Z" fill="black"/>\n      <path d="M283.587 752.64C282.019 752.64 280.827 752.128 280.011 751.104C279.211 750.064 278.811 748.376 278.811 746.04C278.811 743.768 279.203 742.104 279.987 741.048C280.787 739.976 281.979 739.44 283.563 739.44C284.939 739.44 285.971 739.904 286.659 740.832C287.363 741.744 287.715 743.256 287.715 745.368V746.616H280.875C280.891 748.088 281.123 749.168 281.571 749.856C282.019 750.544 282.707 750.888 283.635 750.888C284.259 750.888 284.771 750.64 285.171 750.144C285.571 749.632 285.771 748.936 285.771 748.056H287.715C287.715 749.464 287.331 750.584 286.563 751.416C285.811 752.232 284.819 752.64 283.587 752.64ZM280.899 744.864H285.651C285.651 743.664 285.475 742.752 285.123 742.128C284.771 741.504 284.251 741.192 283.563 741.192C282.683 741.192 282.035 741.504 281.619 742.128C281.219 742.736 280.979 743.648 280.899 744.864Z" fill="black"/>\n      <path d="M298.876 752.64C297.916 752.64 297.132 752.464 296.524 752.112C295.932 751.744 295.5 751.28 295.228 750.72C294.956 750.16 294.82 749.568 294.82 748.944C294.82 748.768 294.82 748.64 294.82 748.56C294.836 748.48 294.844 748.432 294.844 748.416H296.908V748.656C296.908 749.44 297.108 750.016 297.508 750.384C297.908 750.736 298.396 750.912 298.972 750.912C299.484 750.912 299.924 750.752 300.292 750.432C300.676 750.112 300.868 749.648 300.868 749.04C300.868 748.512 300.724 748.104 300.436 747.816C300.164 747.512 299.812 747.272 299.38 747.096C298.948 746.904 298.484 746.728 297.988 746.568C297.492 746.392 297.028 746.176 296.596 745.92C296.164 745.664 295.804 745.312 295.516 744.864C295.244 744.4 295.108 743.792 295.108 743.04C295.108 742.288 295.268 741.648 295.588 741.12C295.908 740.576 296.364 740.16 296.956 739.872C297.548 739.584 298.244 739.44 299.044 739.44C299.828 739.44 300.484 739.6 301.012 739.92C301.556 740.224 301.964 740.64 302.236 741.168C302.524 741.696 302.668 742.272 302.668 742.896C302.668 742.976 302.66 743.064 302.644 743.16C302.644 743.256 302.644 743.32 302.644 743.352H300.604V743.136C300.604 742.64 300.476 742.192 300.22 741.792C299.98 741.376 299.524 741.168 298.852 741.168C298.388 741.168 298.028 741.264 297.772 741.456C297.532 741.648 297.364 741.88 297.268 742.152C297.188 742.408 297.148 742.656 297.148 742.896C297.148 743.36 297.284 743.72 297.556 743.976C297.844 744.232 298.204 744.44 298.636 744.6C299.068 744.76 299.532 744.928 300.028 745.104C300.524 745.264 300.988 745.48 301.42 745.752C301.852 746.024 302.204 746.4 302.476 746.88C302.764 747.344 302.908 747.968 302.908 748.752C302.908 749.648 302.732 750.384 302.38 750.96C302.028 751.536 301.548 751.96 300.94 752.232C300.348 752.504 299.66 752.64 298.876 752.64Z" fill="black"/>\n      <path d="M310.904 752.352V739.728H312.872V752.352H310.904ZM310.856 737.28V735H312.896V737.28H310.856Z" fill="black"/>\n      <path d="M323.325 756.72C322.301 756.72 321.525 756.424 320.997 755.832C320.469 755.256 320.205 754.552 320.205 753.72C320.205 753.112 320.349 752.56 320.637 752.064C320.941 751.568 321.341 751.224 321.837 751.032C321.517 750.824 321.261 750.552 321.069 750.216C320.893 749.864 320.805 749.504 320.805 749.136C320.805 748.624 320.965 748.184 321.285 747.816C321.621 747.432 322.053 747.144 322.581 746.952C322.133 746.584 321.773 746.128 321.501 745.584C321.245 745.024 321.117 744.392 321.117 743.688C321.117 742.36 321.485 741.32 322.221 740.568C322.957 739.816 323.965 739.44 325.245 739.44C325.901 739.44 326.509 739.592 327.069 739.896C327.629 739.592 328.013 739.248 328.221 738.864C328.429 738.48 328.565 738.088 328.629 737.688H330.357C330.357 738.44 330.165 739.088 329.781 739.632C329.413 740.176 328.901 740.536 328.245 740.712C328.597 741.064 328.869 741.496 329.061 742.008C329.269 742.504 329.373 743.064 329.373 743.688C329.373 745 329.005 746.032 328.269 746.784C327.549 747.536 326.573 747.92 325.341 747.936H324.021C323.701 747.936 323.429 748.048 323.205 748.272C322.981 748.48 322.869 748.744 322.869 749.064C322.869 749.368 322.981 749.632 323.205 749.856C323.445 750.08 323.717 750.192 324.021 750.192H327.621C328.533 750.192 329.253 750.488 329.781 751.08C330.325 751.656 330.597 752.344 330.597 753.144C330.597 753.8 330.453 754.4 330.165 754.944C329.893 755.488 329.477 755.92 328.917 756.24C328.373 756.56 327.701 756.72 326.901 756.72H323.325ZM323.637 755.016H327.117C327.533 755.016 327.885 754.864 328.173 754.56C328.461 754.272 328.605 753.928 328.605 753.528C328.605 753.112 328.485 752.76 328.245 752.472C328.005 752.2 327.629 752.064 327.117 752.064H323.637C323.141 752.064 322.773 752.2 322.533 752.472C322.293 752.76 322.173 753.112 322.173 753.528C322.173 753.928 322.293 754.272 322.533 754.56C322.773 754.864 323.141 755.016 323.637 755.016ZM325.221 746.304C325.925 746.304 326.461 746.072 326.829 745.608C327.197 745.128 327.381 744.488 327.381 743.688C327.381 742.84 327.197 742.192 326.829 741.744C326.461 741.296 325.925 741.072 325.221 741.072C324.533 741.072 324.005 741.312 323.637 741.792C323.269 742.256 323.085 742.888 323.085 743.688C323.085 744.52 323.269 745.168 323.637 745.632C324.005 746.08 324.533 746.304 325.221 746.304Z" fill="black"/>\n      <path d="M337.558 752.352V739.728H339.046L339.31 741.192H339.454C339.806 740.568 340.246 740.12 340.774 739.848C341.302 739.576 341.878 739.44 342.502 739.44C343.446 739.44 344.198 739.728 344.758 740.304C345.334 740.864 345.622 741.848 345.622 743.256V752.352H343.654V743.4C343.654 742.52 343.486 741.936 343.15 741.648C342.83 741.344 342.406 741.192 341.878 741.192C341.254 741.192 340.702 741.496 340.222 742.104C339.758 742.712 339.526 743.56 339.526 744.648V752.352H337.558Z" fill="black"/>\n      <path d="M353.88 755.328L354.84 752.352H353.88V749.76H356.28V752.136L355.128 755.328H353.88Z" fill="black"/>\n      <path d="M375.266 756.504V739.728H376.754L377.018 741.192H377.138C377.442 740.616 377.834 740.184 378.314 739.896C378.794 739.592 379.322 739.44 379.898 739.44C381.098 739.44 382.05 739.968 382.754 741.024C383.458 742.064 383.81 743.744 383.81 746.064C383.81 747.584 383.642 748.832 383.306 749.808C382.97 750.784 382.514 751.504 381.938 751.968C381.378 752.416 380.746 752.64 380.042 752.64C379.434 752.64 378.89 752.52 378.41 752.28C377.93 752.024 377.578 751.68 377.354 751.248H377.234V756.504H375.266ZM379.49 750.888C380.242 750.888 380.802 750.552 381.17 749.88C381.554 749.192 381.746 748.064 381.746 746.496V745.584C381.746 744.016 381.554 742.896 381.17 742.224C380.802 741.536 380.242 741.192 379.49 741.192C378.738 741.192 378.17 741.56 377.786 742.296C377.418 743.032 377.234 744.128 377.234 745.584V746.496C377.234 747.952 377.418 749.048 377.786 749.784C378.17 750.52 378.738 750.888 379.49 750.888Z" fill="black"/>\n      <path d="M391.491 752.352V739.728H392.979L393.243 741.384H393.387C393.547 740.904 393.795 740.464 394.131 740.064C394.467 739.648 394.931 739.44 395.523 739.44C395.795 739.44 396.019 739.472 396.195 739.536C396.371 739.6 396.459 739.632 396.459 739.632V741.672H395.811C395.395 741.672 395.003 741.768 394.635 741.96C394.283 742.136 393.995 742.44 393.771 742.872C393.563 743.304 393.459 743.896 393.459 744.648V752.352H391.491Z" fill="black"/>\n      <path d="M407.365 752.64C405.893 752.64 404.773 752.112 404.005 751.056C403.237 749.984 402.853 748.312 402.853 746.04C402.853 743.768 403.237 742.104 404.005 741.048C404.773 739.976 405.893 739.44 407.365 739.44C408.837 739.44 409.957 739.976 410.725 741.048C411.493 742.104 411.877 743.768 411.877 746.04C411.877 748.312 411.493 749.984 410.725 751.056C409.957 752.112 408.837 752.64 407.365 752.64ZM407.365 750.888C408.181 750.888 408.789 750.52 409.189 749.784C409.605 749.048 409.813 747.952 409.813 746.496V745.584C409.813 744.128 409.605 743.032 409.189 742.296C408.789 741.56 408.181 741.192 407.365 741.192C406.549 741.192 405.933 741.56 405.517 742.296C405.117 743.032 404.917 744.128 404.917 745.584V746.496C404.917 747.952 405.117 749.048 405.517 749.784C405.933 750.52 406.549 750.888 407.365 750.888Z" fill="black"/>\n      <path d="M421.551 756.72C420.527 756.72 419.751 756.424 419.223 755.832C418.695 755.256 418.431 754.552 418.431 753.72C418.431 753.112 418.575 752.56 418.863 752.064C419.167 751.568 419.567 751.224 420.063 751.032C419.743 750.824 419.487 750.552 419.295 750.216C419.119 749.864 419.031 749.504 419.031 749.136C419.031 748.624 419.191 748.184 419.511 747.816C419.847 747.432 420.279 747.144 420.807 746.952C420.359 746.584 419.999 746.128 419.727 745.584C419.471 745.024 419.343 744.392 419.343 743.688C419.343 742.36 419.711 741.32 420.447 740.568C421.183 739.816 422.191 739.44 423.471 739.44C424.127 739.44 424.735 739.592 425.295 739.896C425.855 739.592 426.239 739.248 426.447 738.864C426.655 738.48 426.791 738.088 426.855 737.688H428.583C428.583 738.44 428.391 739.088 428.007 739.632C427.639 740.176 427.127 740.536 426.471 740.712C426.823 741.064 427.095 741.496 427.287 742.008C427.495 742.504 427.599 743.064 427.599 743.688C427.599 745 427.231 746.032 426.495 746.784C425.775 747.536 424.799 747.92 423.567 747.936H422.247C421.927 747.936 421.655 748.048 421.431 748.272C421.207 748.48 421.095 748.744 421.095 749.064C421.095 749.368 421.207 749.632 421.431 749.856C421.671 750.08 421.943 750.192 422.247 750.192H425.847C426.759 750.192 427.479 750.488 428.007 751.08C428.551 751.656 428.823 752.344 428.823 753.144C428.823 753.8 428.679 754.4 428.391 754.944C428.119 755.488 427.703 755.92 427.143 756.24C426.599 756.56 425.927 756.72 425.127 756.72H421.551ZM421.863 755.016H425.343C425.759 755.016 426.111 754.864 426.399 754.56C426.687 754.272 426.831 753.928 426.831 753.528C426.831 753.112 426.711 752.76 426.471 752.472C426.231 752.2 425.855 752.064 425.343 752.064H421.863C421.367 752.064 420.999 752.2 420.759 752.472C420.519 752.76 420.399 753.112 420.399 753.528C420.399 753.928 420.519 754.272 420.759 754.56C420.999 754.864 421.367 755.016 421.863 755.016ZM423.447 746.304C424.151 746.304 424.687 746.072 425.055 745.608C425.423 745.128 425.607 744.488 425.607 743.688C425.607 742.84 425.423 742.192 425.055 741.744C424.687 741.296 424.151 741.072 423.447 741.072C422.759 741.072 422.231 741.312 421.863 741.792C421.495 742.256 421.311 742.888 421.311 743.688C421.311 744.52 421.495 745.168 421.863 745.632C422.231 746.08 422.759 746.304 423.447 746.304Z" fill="black"/>\n      <path d="M435.784 752.352V739.728H437.272L437.536 741.384H437.68C437.84 740.904 438.088 740.464 438.424 740.064C438.76 739.648 439.224 739.44 439.816 739.44C440.088 739.44 440.312 739.472 440.488 739.536C440.664 739.6 440.752 739.632 440.752 739.632V741.672H440.104C439.688 741.672 439.296 741.768 438.928 741.96C438.576 742.136 438.288 742.44 438.064 742.872C437.856 743.304 437.752 743.896 437.752 744.648V752.352H435.784Z" fill="black"/>\n      <path d="M450.315 752.64C450.011 752.64 449.667 752.592 449.283 752.496C448.899 752.416 448.531 752.256 448.179 752.016C447.843 751.76 447.563 751.4 447.339 750.936C447.115 750.472 447.003 749.856 447.003 749.088C447.003 747.92 447.275 747.04 447.819 746.448C448.379 745.84 449.139 745.424 450.099 745.2C451.075 744.976 452.171 744.864 453.387 744.864V743.232C453.387 742.624 453.251 742.136 452.979 741.768C452.723 741.384 452.195 741.192 451.395 741.192C450.659 741.192 450.147 741.408 449.859 741.84C449.587 742.256 449.451 742.704 449.451 743.184V743.472H447.507C447.491 743.392 447.483 743.312 447.483 743.232C447.483 743.152 447.483 743.056 447.483 742.944C447.483 741.792 447.859 740.92 448.611 740.328C449.379 739.736 450.355 739.44 451.539 739.44C452.819 739.44 453.771 739.752 454.395 740.376C455.035 740.984 455.355 741.848 455.355 742.968V750.048C455.355 750.352 455.427 750.568 455.571 750.696C455.715 750.824 455.867 750.888 456.027 750.888H456.795V752.256C456.683 752.32 456.515 752.384 456.291 752.448C456.083 752.512 455.819 752.544 455.499 752.544C454.987 752.544 454.555 752.4 454.203 752.112C453.867 751.824 453.635 751.448 453.507 750.984H453.387C453.067 751.496 452.635 751.904 452.091 752.208C451.563 752.496 450.971 752.64 450.315 752.64ZM450.771 750.888C451.187 750.888 451.595 750.776 451.995 750.552C452.395 750.312 452.723 749.96 452.979 749.496C453.251 749.032 453.387 748.456 453.387 747.768V746.616C452.523 746.616 451.763 746.68 451.107 746.808C450.467 746.92 449.963 747.144 449.595 747.48C449.243 747.816 449.067 748.312 449.067 748.968C449.067 749.688 449.211 750.192 449.499 750.48C449.803 750.752 450.227 750.888 450.771 750.888Z" fill="black"/>\n      <path d="M463.852 752.352V739.728H465.34L465.604 741.192H465.748C466.084 740.568 466.5 740.12 466.996 739.848C467.492 739.576 468.036 739.44 468.628 739.44C469.252 739.44 469.796 739.584 470.26 739.872C470.74 740.144 471.092 740.608 471.316 741.264C471.652 740.656 472.1 740.2 472.66 739.896C473.22 739.592 473.796 739.44 474.388 739.44C474.98 739.44 475.5 739.568 475.948 739.824C476.396 740.064 476.74 740.464 476.98 741.024C477.236 741.568 477.364 742.312 477.364 743.256V752.352H475.396V743.4C475.396 742.52 475.236 741.936 474.916 741.648C474.612 741.344 474.228 741.192 473.764 741.192C473.172 741.192 472.66 741.496 472.228 742.104C471.812 742.712 471.604 743.56 471.604 744.648V752.352H469.636V743.4C469.636 742.52 469.476 741.936 469.156 741.648C468.852 741.344 468.468 741.192 468.004 741.192C467.412 741.192 466.9 741.496 466.468 742.104C466.036 742.712 465.82 743.56 465.82 744.648V752.352H463.852Z" fill="black"/>\n      <path d="M485.515 752.352V739.728H487.003L487.267 741.192H487.411C487.747 740.568 488.163 740.12 488.659 739.848C489.155 739.576 489.699 739.44 490.291 739.44C490.915 739.44 491.459 739.584 491.923 739.872C492.403 740.144 492.755 740.608 492.979 741.264C493.315 740.656 493.763 740.2 494.323 739.896C494.883 739.592 495.459 739.44 496.051 739.44C496.643 739.44 497.163 739.568 497.611 739.824C498.059 740.064 498.403 740.464 498.643 741.024C498.899 741.568 499.027 742.312 499.027 743.256V752.352H497.059V743.4C497.059 742.52 496.899 741.936 496.579 741.648C496.275 741.344 495.891 741.192 495.427 741.192C494.835 741.192 494.323 741.496 493.891 742.104C493.475 742.712 493.267 743.56 493.267 744.648V752.352H491.299V743.4C491.299 742.52 491.139 741.936 490.819 741.648C490.515 741.344 490.131 741.192 489.667 741.192C489.075 741.192 488.563 741.496 488.131 742.104C487.699 742.712 487.483 743.56 487.483 744.648V752.352H485.515Z" fill="black"/>\n      <path d="M507.49 752.352V739.728H509.458V752.352H507.49ZM507.442 737.28V735H509.482V737.28H507.442Z" fill="black"/>\n      <path d="M517.918 752.352V739.728H519.406L519.67 741.192H519.814C520.166 740.568 520.606 740.12 521.134 739.848C521.662 739.576 522.238 739.44 522.862 739.44C523.806 739.44 524.558 739.728 525.118 740.304C525.694 740.864 525.982 741.848 525.982 743.256V752.352H524.014V743.4C524.014 742.52 523.846 741.936 523.51 741.648C523.19 741.344 522.766 741.192 522.238 741.192C521.614 741.192 521.062 741.496 520.582 742.104C520.118 742.712 519.886 743.56 519.886 744.648V752.352H517.918Z" fill="black"/>\n      <path d="M536.136 756.72C535.112 756.72 534.336 756.424 533.808 755.832C533.28 755.256 533.016 754.552 533.016 753.72C533.016 753.112 533.16 752.56 533.448 752.064C533.752 751.568 534.152 751.224 534.648 751.032C534.328 750.824 534.072 750.552 533.88 750.216C533.704 749.864 533.616 749.504 533.616 749.136C533.616 748.624 533.776 748.184 534.096 747.816C534.432 747.432 534.864 747.144 535.392 746.952C534.944 746.584 534.584 746.128 534.312 745.584C534.056 745.024 533.928 744.392 533.928 743.688C533.928 742.36 534.296 741.32 535.032 740.568C535.768 739.816 536.776 739.44 538.056 739.44C538.712 739.44 539.32 739.592 539.88 739.896C540.44 739.592 540.824 739.248 541.032 738.864C541.24 738.48 541.376 738.088 541.44 737.688H543.168C543.168 738.44 542.976 739.088 542.592 739.632C542.224 740.176 541.712 740.536 541.056 740.712C541.408 741.064 541.68 741.496 541.872 742.008C542.08 742.504 542.184 743.064 542.184 743.688C542.184 745 541.816 746.032 541.08 746.784C540.36 747.536 539.384 747.92 538.152 747.936H536.832C536.512 747.936 536.24 748.048 536.016 748.272C535.792 748.48 535.68 748.744 535.68 749.064C535.68 749.368 535.792 749.632 536.016 749.856C536.256 750.08 536.528 750.192 536.832 750.192H540.432C541.344 750.192 542.064 750.488 542.592 751.08C543.136 751.656 543.408 752.344 543.408 753.144C543.408 753.8 543.264 754.4 542.976 754.944C542.704 755.488 542.288 755.92 541.728 756.24C541.184 756.56 540.512 756.72 539.712 756.72H536.136ZM536.448 755.016H539.928C540.344 755.016 540.696 754.864 540.984 754.56C541.272 754.272 541.416 753.928 541.416 753.528C541.416 753.112 541.296 752.76 541.056 752.472C540.816 752.2 540.44 752.064 539.928 752.064H536.448C535.952 752.064 535.584 752.2 535.344 752.472C535.104 752.76 534.984 753.112 534.984 753.528C534.984 753.928 535.104 754.272 535.344 754.56C535.584 754.864 535.952 755.016 536.448 755.016ZM538.032 746.304C538.736 746.304 539.272 746.072 539.64 745.608C540.008 745.128 540.192 744.488 540.192 743.688C540.192 742.84 540.008 742.192 539.64 741.744C539.272 741.296 538.736 741.072 538.032 741.072C537.344 741.072 536.816 741.312 536.448 741.792C536.08 742.256 535.896 742.888 535.896 743.688C535.896 744.52 536.08 745.168 536.448 745.632C536.816 746.08 537.344 746.304 538.032 746.304Z" fill="black"/>\n      <path d="M550.465 755.328L551.425 752.352H550.465V749.76H552.865V752.136L551.713 755.328H550.465Z" fill="black"/>\n      <path d="M575.259 752.64C574.299 752.64 573.515 752.464 572.907 752.112C572.315 751.744 571.883 751.28 571.611 750.72C571.339 750.16 571.203 749.568 571.203 748.944C571.203 748.768 571.203 748.64 571.203 748.56C571.219 748.48 571.227 748.432 571.227 748.416H573.291V748.656C573.291 749.44 573.491 750.016 573.891 750.384C574.291 750.736 574.779 750.912 575.355 750.912C575.867 750.912 576.307 750.752 576.675 750.432C577.059 750.112 577.251 749.648 577.251 749.04C577.251 748.512 577.107 748.104 576.819 747.816C576.547 747.512 576.195 747.272 575.763 747.096C575.331 746.904 574.867 746.728 574.371 746.568C573.875 746.392 573.411 746.176 572.979 745.92C572.547 745.664 572.187 745.312 571.899 744.864C571.627 744.4 571.491 743.792 571.491 743.04C571.491 742.288 571.651 741.648 571.971 741.12C572.291 740.576 572.747 740.16 573.339 739.872C573.931 739.584 574.627 739.44 575.427 739.44C576.211 739.44 576.867 739.6 577.395 739.92C577.939 740.224 578.347 740.64 578.619 741.168C578.907 741.696 579.051 742.272 579.051 742.896C579.051 742.976 579.043 743.064 579.027 743.16C579.027 743.256 579.027 743.32 579.027 743.352H576.987V743.136C576.987 742.64 576.859 742.192 576.603 741.792C576.363 741.376 575.907 741.168 575.235 741.168C574.771 741.168 574.411 741.264 574.155 741.456C573.915 741.648 573.747 741.88 573.651 742.152C573.571 742.408 573.531 742.656 573.531 742.896C573.531 743.36 573.667 743.72 573.939 743.976C574.227 744.232 574.587 744.44 575.019 744.6C575.451 744.76 575.915 744.928 576.411 745.104C576.907 745.264 577.371 745.48 577.803 745.752C578.235 746.024 578.587 746.4 578.859 746.88C579.147 747.344 579.291 747.968 579.291 748.752C579.291 749.648 579.115 750.384 578.763 750.96C578.411 751.536 577.931 751.96 577.323 752.232C576.731 752.504 576.043 752.64 575.259 752.64Z" fill="black"/>\n      <path d="M591.319 752.64C589.751 752.64 588.559 752.128 587.743 751.104C586.943 750.064 586.543 748.376 586.543 746.04C586.543 743.768 586.935 742.104 587.719 741.048C588.519 739.976 589.711 739.44 591.295 739.44C592.671 739.44 593.703 739.904 594.391 740.832C595.095 741.744 595.447 743.256 595.447 745.368V746.616H588.607C588.623 748.088 588.855 749.168 589.303 749.856C589.751 750.544 590.439 750.888 591.367 750.888C591.991 750.888 592.503 750.64 592.903 750.144C593.303 749.632 593.503 748.936 593.503 748.056H595.447C595.447 749.464 595.063 750.584 594.295 751.416C593.543 752.232 592.551 752.64 591.319 752.64ZM588.631 744.864H593.383C593.383 743.664 593.207 742.752 592.855 742.128C592.503 741.504 591.983 741.192 591.295 741.192C590.415 741.192 589.767 741.504 589.351 742.128C588.951 742.736 588.711 743.648 588.631 744.864Z" fill="black"/>\n      <path d="M607.544 752.64C605.976 752.64 604.784 752.128 603.968 751.104C603.168 750.064 602.768 748.376 602.768 746.04C602.768 743.768 603.16 742.104 603.944 741.048C604.744 739.976 605.936 739.44 607.52 739.44C608.896 739.44 609.928 739.904 610.616 740.832C611.32 741.744 611.672 743.256 611.672 745.368V746.616H604.832C604.848 748.088 605.08 749.168 605.528 749.856C605.976 750.544 606.664 750.888 607.592 750.888C608.216 750.888 608.728 750.64 609.128 750.144C609.528 749.632 609.728 748.936 609.728 748.056H611.672C611.672 749.464 611.288 750.584 610.52 751.416C609.768 752.232 608.776 752.64 607.544 752.64ZM604.856 744.864H609.608C609.608 743.664 609.432 742.752 609.08 742.128C608.728 741.504 608.208 741.192 607.52 741.192C606.64 741.192 605.992 741.504 605.576 742.128C605.176 742.736 604.936 743.648 604.856 744.864Z" fill="black"/>\n      <path d="M619.425 752.352V735H621.393V745.584L625.473 739.728H627.657L623.937 744.912L627.849 752.352H625.617L622.737 746.592L621.393 748.056V752.352H619.425Z" fill="black"/>\n      <path d="M634.861 752.352V739.728H636.829V752.352H634.861ZM634.813 737.28V735H636.853V737.28H634.813Z" fill="black"/>\n      <path d="M645.29 752.352V739.728H646.778L647.042 741.192H647.186C647.538 740.568 647.978 740.12 648.506 739.848C649.034 739.576 649.61 739.44 650.234 739.44C651.178 739.44 651.93 739.728 652.49 740.304C653.066 740.864 653.354 741.848 653.354 743.256V752.352H651.386V743.4C651.386 742.52 651.218 741.936 650.882 741.648C650.562 741.344 650.138 741.192 649.61 741.192C648.986 741.192 648.434 741.496 647.954 742.104C647.49 742.712 647.258 743.56 647.258 744.648V752.352H645.29Z" fill="black"/>\n      <path d="M663.507 756.72C662.483 756.72 661.707 756.424 661.179 755.832C660.651 755.256 660.387 754.552 660.387 753.72C660.387 753.112 660.531 752.56 660.819 752.064C661.123 751.568 661.523 751.224 662.019 751.032C661.699 750.824 661.443 750.552 661.251 750.216C661.075 749.864 660.987 749.504 660.987 749.136C660.987 748.624 661.147 748.184 661.467 747.816C661.803 747.432 662.235 747.144 662.763 746.952C662.315 746.584 661.955 746.128 661.683 745.584C661.427 745.024 661.299 744.392 661.299 743.688C661.299 742.36 661.667 741.32 662.403 740.568C663.139 739.816 664.147 739.44 665.427 739.44C666.083 739.44 666.691 739.592 667.251 739.896C667.811 739.592 668.195 739.248 668.403 738.864C668.611 738.48 668.747 738.088 668.811 737.688H670.539C670.539 738.44 670.347 739.088 669.963 739.632C669.595 740.176 669.083 740.536 668.427 740.712C668.779 741.064 669.051 741.496 669.243 742.008C669.451 742.504 669.555 743.064 669.555 743.688C669.555 745 669.187 746.032 668.451 746.784C667.731 747.536 666.755 747.92 665.523 747.936H664.203C663.883 747.936 663.611 748.048 663.387 748.272C663.163 748.48 663.051 748.744 663.051 749.064C663.051 749.368 663.163 749.632 663.387 749.856C663.627 750.08 663.899 750.192 664.203 750.192H667.803C668.715 750.192 669.435 750.488 669.963 751.08C670.507 751.656 670.779 752.344 670.779 753.144C670.779 753.8 670.635 754.4 670.347 754.944C670.075 755.488 669.659 755.92 669.099 756.24C668.555 756.56 667.883 756.72 667.083 756.72H663.507ZM663.819 755.016H667.299C667.715 755.016 668.067 754.864 668.355 754.56C668.643 754.272 668.787 753.928 668.787 753.528C668.787 753.112 668.667 752.76 668.427 752.472C668.187 752.2 667.811 752.064 667.299 752.064H663.819C663.323 752.064 662.955 752.2 662.715 752.472C662.475 752.76 662.355 753.112 662.355 753.528C662.355 753.928 662.475 754.272 662.715 754.56C662.955 754.864 663.323 755.016 663.819 755.016ZM665.403 746.304C666.107 746.304 666.643 746.072 667.011 745.608C667.379 745.128 667.563 744.488 667.563 743.688C667.563 742.84 667.379 742.192 667.011 741.744C666.643 741.296 666.107 741.072 665.403 741.072C664.715 741.072 664.187 741.312 663.819 741.792C663.451 742.256 663.267 742.888 663.267 743.688C663.267 744.52 663.451 745.168 663.819 745.632C664.187 746.08 664.715 746.304 665.403 746.304Z" fill="black"/>\n      <path d="M690.474 756.72C689.45 756.72 688.674 756.424 688.146 755.832C687.618 755.256 687.354 754.552 687.354 753.72C687.354 753.112 687.498 752.56 687.786 752.064C688.09 751.568 688.49 751.224 688.986 751.032C688.666 750.824 688.41 750.552 688.218 750.216C688.042 749.864 687.954 749.504 687.954 749.136C687.954 748.624 688.114 748.184 688.434 747.816C688.77 747.432 689.202 747.144 689.73 746.952C689.282 746.584 688.922 746.128 688.65 745.584C688.394 745.024 688.266 744.392 688.266 743.688C688.266 742.36 688.634 741.32 689.37 740.568C690.106 739.816 691.114 739.44 692.394 739.44C693.05 739.44 693.658 739.592 694.218 739.896C694.778 739.592 695.162 739.248 695.37 738.864C695.578 738.48 695.714 738.088 695.778 737.688H697.506C697.506 738.44 697.314 739.088 696.93 739.632C696.562 740.176 696.05 740.536 695.394 740.712C695.746 741.064 696.018 741.496 696.21 742.008C696.418 742.504 696.522 743.064 696.522 743.688C696.522 745 696.154 746.032 695.418 746.784C694.698 747.536 693.722 747.92 692.49 747.936H691.17C690.85 747.936 690.578 748.048 690.354 748.272C690.13 748.48 690.018 748.744 690.018 749.064C690.018 749.368 690.13 749.632 690.354 749.856C690.594 750.08 690.866 750.192 691.17 750.192H694.77C695.682 750.192 696.402 750.488 696.93 751.08C697.474 751.656 697.746 752.344 697.746 753.144C697.746 753.8 697.602 754.4 697.314 754.944C697.042 755.488 696.626 755.92 696.066 756.24C695.522 756.56 694.85 756.72 694.05 756.72H690.474ZM690.786 755.016H694.266C694.682 755.016 695.034 754.864 695.322 754.56C695.61 754.272 695.754 753.928 695.754 753.528C695.754 753.112 695.634 752.76 695.394 752.472C695.154 752.2 694.778 752.064 694.266 752.064H690.786C690.29 752.064 689.922 752.2 689.682 752.472C689.442 752.76 689.322 753.112 689.322 753.528C689.322 753.928 689.442 754.272 689.682 754.56C689.922 754.864 690.29 755.016 690.786 755.016ZM692.37 746.304C693.074 746.304 693.61 746.072 693.978 745.608C694.346 745.128 694.53 744.488 694.53 743.688C694.53 742.84 694.346 742.192 693.978 741.744C693.61 741.296 693.074 741.072 692.37 741.072C691.682 741.072 691.154 741.312 690.786 741.792C690.418 742.256 690.234 742.888 690.234 743.688C690.234 744.52 690.418 745.168 690.786 745.632C691.154 746.08 691.682 746.304 692.37 746.304Z" fill="black"/>\n      <path d="M704.707 752.352V739.728H706.195L706.459 741.384H706.603C706.763 740.904 707.011 740.464 707.347 740.064C707.683 739.648 708.147 739.44 708.739 739.44C709.011 739.44 709.235 739.472 709.411 739.536C709.587 739.6 709.675 739.632 709.675 739.632V741.672H709.027C708.611 741.672 708.219 741.768 707.851 741.96C707.499 742.136 707.211 742.44 706.987 742.872C706.779 743.304 706.675 743.896 706.675 744.648V752.352H704.707Z" fill="black"/>\n      <path d="M719.237 752.64C718.933 752.64 718.589 752.592 718.205 752.496C717.821 752.416 717.453 752.256 717.101 752.016C716.765 751.76 716.485 751.4 716.261 750.936C716.037 750.472 715.925 749.856 715.925 749.088C715.925 747.92 716.197 747.04 716.741 746.448C717.301 745.84 718.061 745.424 719.021 745.2C719.997 744.976 721.093 744.864 722.309 744.864V743.232C722.309 742.624 722.173 742.136 721.901 741.768C721.645 741.384 721.117 741.192 720.317 741.192C719.581 741.192 719.069 741.408 718.781 741.84C718.509 742.256 718.373 742.704 718.373 743.184V743.472H716.429C716.413 743.392 716.405 743.312 716.405 743.232C716.405 743.152 716.405 743.056 716.405 742.944C716.405 741.792 716.781 740.92 717.533 740.328C718.301 739.736 719.277 739.44 720.461 739.44C721.741 739.44 722.693 739.752 723.317 740.376C723.957 740.984 724.277 741.848 724.277 742.968V750.048C724.277 750.352 724.349 750.568 724.493 750.696C724.637 750.824 724.789 750.888 724.949 750.888H725.717V752.256C725.605 752.32 725.437 752.384 725.213 752.448C725.005 752.512 724.741 752.544 724.421 752.544C723.909 752.544 723.477 752.4 723.125 752.112C722.789 751.824 722.557 751.448 722.429 750.984H722.309C721.989 751.496 721.557 751.904 721.013 752.208C720.485 752.496 719.893 752.64 719.237 752.64ZM719.693 750.888C720.109 750.888 720.517 750.776 720.917 750.552C721.317 750.312 721.645 749.96 721.901 749.496C722.173 749.032 722.309 748.456 722.309 747.768V746.616C721.445 746.616 720.685 746.68 720.029 746.808C719.389 746.92 718.885 747.144 718.517 747.48C718.165 747.816 717.989 748.312 717.989 748.968C717.989 749.688 718.133 750.192 718.421 750.48C718.725 750.752 719.149 750.888 719.693 750.888Z" fill="black"/>\n      <path d="M736.519 752.64C735.031 752.64 733.935 752.112 733.231 751.056C732.543 749.984 732.199 748.312 732.199 746.04C732.199 743.768 732.551 742.104 733.255 741.048C733.959 739.976 735.047 739.44 736.519 739.44C737.895 739.44 738.879 739.864 739.471 740.712C740.079 741.56 740.383 742.792 740.383 744.408H738.343C738.343 743.32 738.215 742.512 737.959 741.984C737.703 741.456 737.223 741.192 736.519 741.192C735.735 741.192 735.159 741.56 734.791 742.296C734.439 743.032 734.263 744.128 734.263 745.584V746.496C734.263 747.952 734.439 749.048 734.791 749.784C735.159 750.52 735.735 750.888 736.519 750.888C737.223 750.888 737.719 750.616 738.007 750.072C738.295 749.512 738.439 748.712 738.439 747.672H740.383C740.383 748.552 740.255 749.368 739.999 750.12C739.743 750.872 739.327 751.48 738.751 751.944C738.191 752.408 737.447 752.64 736.519 752.64Z" fill="black"/>\n      <path d="M752.242 752.64C750.674 752.64 749.482 752.128 748.666 751.104C747.866 750.064 747.466 748.376 747.466 746.04C747.466 743.768 747.858 742.104 748.642 741.048C749.442 739.976 750.634 739.44 752.218 739.44C753.594 739.44 754.626 739.904 755.314 740.832C756.018 741.744 756.37 743.256 756.37 745.368V746.616H749.53C749.546 748.088 749.778 749.168 750.226 749.856C750.674 750.544 751.362 750.888 752.29 750.888C752.914 750.888 753.426 750.64 753.826 750.144C754.226 749.632 754.426 748.936 754.426 748.056H756.37C756.37 749.464 755.986 750.584 755.218 751.416C754.466 752.232 753.474 752.64 752.242 752.64ZM749.554 744.864H754.306C754.306 743.664 754.13 742.752 753.778 742.128C753.426 741.504 752.906 741.192 752.218 741.192C751.338 741.192 750.69 741.504 750.274 742.128C749.874 742.736 749.634 743.648 749.554 744.864Z" fill="black"/>\n    </g>\n    <line id="l1" x1="507.5" y1="218" x2="507.5" y2="89" stroke="black"/>\n    <line id="l2" x1="507.5" y1="930" x2="507.5" y2="801" stroke="black"/>\n  </g>\n</svg>\n'),n=e.xml,t=n.width.baseVal.value,a=n.height.baseVal.value,i=10/Math.max(t,a),o=e.paths.flatMap(e=>e.toShapes(!0)).map(e=>new l.MSw(e));!function(e){if(e.index){let n=e.index.array;for(let e=0,t=n.length;e<t;e+=3){let t=n[e+0],a=n[e+1];n[e+0]=a,n[e+1]=t}e.index.needsUpdate=!0}else{let n=e.attributes.position.count;for(let t of Object.values(e.attributes)){let{array:e,itemSize:a}=t;switch(t.needsUpdate=!0,a){case 3:{let t=new l.Pq0,i=new l.Pq0;for(let o=0;o<n;o+=3)t.fromArray(e,(o+0)*a),i.fromArray(e,(o+1)*a),t.toArray(e,(o+1)*a),i.toArray(e,(o+0)*a);break}case 2:{let t=new l.I9Y,i=new l.I9Y;for(let o=0;o<n;o+=3)t.fromArray(e,(o+0)*a),i.fromArray(e,(o+1)*a),t.toArray(e,(o+1)*a),i.toArray(e,(o+0)*a)}}}}if(e.attributes.normal){let n=e.attributes.normal;for(let e=0;e<n.count;e++)n.setXYZ(e,-n.getX(e),-n.getY(e),-n.getZ(e));n.needsUpdate=!0}}(s.pP(o,!1).translate(-t/2,-a/2,0).scale(i,-i,1)),this.imageFill=function(e,n){for(let n of(e=e.cloneNode(!0)).querySelectorAll("line"))n.remove();for(let n of e.querySelectorAll("#visual *"))n.setAttribute("stroke","none"),n.setAttribute("fill","#f00");for(let n of e.querySelectorAll("#tech *"))n.setAttribute("stroke","none"),n.setAttribute("fill","#0f0");for(let n of e.querySelectorAll("#baseline *"))n.remove();return b(e.outerHTML,4096,4096)}(n,4096),this.imageStroke=function(e,n){for(let n of(e=e.cloneNode(!0)).querySelectorAll("line, path"))n.setAttribute("stroke","#fff"),n.setAttribute("fill","none"),n.setAttribute("stroke-width","0.5");for(let n of e.querySelectorAll("#baseline *"))n.setAttribute("stroke","none"),n.setAttribute("fill","#fff");return b(e.outerHTML,4096,4096)}(n,4096)}}var z=t(67941);function M(){let e=(0,a.Fw)(),n=(0,z.Qs)();return(0,a.dB)("my-scene",function*(t){var a;e.pipeline.basicPasses.fxaa.enabled=!1,null==(a=document.querySelector("nextjs-portal"))||a.remove(),(0,o.mj)(new i.u,t),(0,o.mj)((yield*new V().initialize(e,n)),t)},[]),null}},98114:(e,n,t)=>{"use strict";t.r(n),t.d(n,{FpsMeter:()=>r});var a=t(70691),i=t(18479),o=t(36508);let l={frequency:3,tickerName:"three",precision:1};function r(e){let{frequency:n,tickerName:t,precision:r,...s}={...l,...e},{ref:c}=(0,i.useEffects)(function*(){let e=o.Rv.get("three");yield e.onTick({timeInterval:1/3},()=>{c.current.innerText="".concat(e.averageFps.toFixed(r)," fps")})},[n,t,r]);return(0,a.jsx)("div",{ref:c,...s,children:"-- fps"})}}}]);