"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2400],{3009:(n,e,t)=>{t.d(e,{Zt:()=>a,zf:()=>o,QS:()=>x});let o="\n#ifndef GLSL_BEND\n#define GLSL_BEND\n  vec4 applyBend(vec4 position, float factor, mat4 bendMatrix, mat4 bendMatrixInverse) {\n    float q = 1.0 / factor;\n    \n    if (abs(factor) < 0.0001)\n      return position;\n    \n    position = bendMatrixInverse * position;\n    vec2 center = vec2(0.0, q);\n    float a = position.x / q;\n    float r = center.y - position.y;\n    position.x = center.x + r * sin(a);\n    position.y = center.y + -r * cos(a);\n    position = bendMatrix * position;\n    return position;\n  }\n#endif\n";var i=t(49797),r=t(7147);function a(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"white";return{uBendFactor:{value:0},uBendMatrix:{value:n.clone()},uBendMatrixInverse:{value:n.clone().invert()},uMyColor:{value:new i.Q1f(e)}}}function x(n,e){r.bI.with(n).uniforms(e).vertex.top(o).vertex.replace("project_vertex","\n  vec4 mvPosition = vec4( transformed, 1.0 );\n  #ifdef USE_BATCHING\n    mvPosition = batchingMatrix * mvPosition;\n  #endif\n  #ifdef USE_INSTANCING\n    mvPosition = instanceMatrix * mvPosition;\n  #endif\n  mvPosition = modelMatrix * mvPosition;\n  mvPosition = applyBend(mvPosition, uBendFactor, uBendMatrix, uBendMatrixInverse);\n  mvPosition = viewMatrix * mvPosition;\n  gl_Position = projectionMatrix * mvPosition;\n")}},14203:(n,e,t)=>{t.d(e,{O:()=>i});var o=t(1029);let i="\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat permute(float x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat taylorInvSqrt(float r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n\n\n\n\n// 2D:\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n		+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// 3D: \n\nfloat snoise(vec3 v)\n{ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n// 4D:\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n						\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v) {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n  // First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n  // Other corners\n\n  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n  //  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n  //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n  // Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n  // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n  // Mix contributions from the five corners\n  vec3 m0 = max(0.57 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.57 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 60.1 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n\n\n\n// addons:\n// Fractal noise, based on Stefan Gustavson's Simplex noise\n".concat((0,o.N)(["vec2","vec3","vec4"],"\n  float fnoise(T p, int octaves, float persistence) {\n    float total = 0.0;           // Final noise value\n    float amplitude = 1.0;       // Initial amplitude\n    float frequency = 1.0;       // Initial frequency\n    float maxValue = 0.0;        // Used for normalization\n\n    for (int i = 0; i < octaves; i++) {\n      total += snoise(p * frequency) * amplitude;\n\n      maxValue += amplitude;   // Keep track of max amplitude\n      amplitude *= persistence; // Reduce amplitude for next octave\n      frequency *= 2.0;        // Increase frequency for next octave\n    }\n\n    // Normalize the result to stay within the range [0, 1]\n    return total / maxValue;\n  }\n\n  float fnoise(T p, int octaves) {\n    return fnoise(p, octaves, 0.5);\n  }\n\n  float fnoise(T p) {\n    return fnoise(p, 4, 0.5);\n  }\n"),"\n\nfloat snoiseFast4D(vec4 p) {\n  const float SCALAR = 0.01;\n  float a = SCALAR * dot(p.xy * 0.3, vec2(-127.1, 311.7));\n  float b = SCALAR * dot(p.zw * 0.8, vec2(269.5, -183.3));\n  float c = SCALAR * dot(p.wx * 6.0, vec2(23.14069, 2.665157));\n  float d = SCALAR * dot(p.zy * 1.3, vec2(-12.9898, 78.233));\n  return (snoise(vec2(a, b)) + snoise(vec2(d, c))) * 0.5;\n}\n\nfloat fnoiseFast4D(vec4 p, int octaves, float persistence) {\n  float total = 0.0;           // Final noise value\n  float amplitude = 1.0;       // Initial amplitude\n  float frequency = 1.0;       // Initial frequency\n  float maxValue = 0.0;        // Used for normalization\n\n  for (int i = 0; i < octaves; i++) {\n    total += snoiseFast4D(p * frequency) * amplitude;\n\n    maxValue += amplitude;   // Keep track of max amplitude\n    amplitude *= persistence; // Reduce amplitude for next octave\n    frequency *= 2.0;        // Increase frequency for next octave\n  }\n\n  // Normalize the result to stay within the range [0, 1]\n  return total / maxValue;\n}\n")},45553:(n,e,t)=>{t.d(e,{z:()=>c});var o=t(49797);let i=new o.Pq0,r=new o.Pq0,a=new o.Pq0,x=new o.Pq0;function c(n,e,t){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:x;a.crossVectors(n,e),1e-6>a.lengthSq()&&(a.set(1,0,0).cross(n),1e-6>a.lengthSq()&&a.set(0,1,0).cross(n));let c=n.length(),s=e.length();i.copy(n).divideScalar(c),r.copy(e).divideScalar(s);let l=Math.acos(Math.min(Math.max(i.dot(r),-1),1));if(1e-6>Math.abs(l))o.lerpVectors(n,e,t);else{a.normalize();let n=l*t,e=Math.cos(n),x=Math.sin(n);o.copy(i).multiplyScalar(e).addScaledVector(r.copy(a).cross(i),x).multiplyScalar((1-t)*c+t*s)}return o}},80446:(n,e,t)=>{t.d(e,{n:()=>i});var o=t(79105);let i=function n(){let e=Math.random,t=()=>{};function i(n){let e=0;for(let t=0;t<n.length;t++)e=(e<<5)-e+n.charCodeAt(t)|0;return e}function r(){for(var n=arguments.length,t=Array(n),o=0;o<n;o++)t[o]=arguments[o];if(0===t.length)return e();if(1===t.length)return e()*t[0];if(2===t.length)return e()*(t[1]-t[0])+t[0];throw Error("Invalid arguments")}function a(){for(var n=arguments.length,t=Array(n),o=0;o<n;o++)t[o]=arguments[o];if(1===t.length)return Math.floor(e()*t[0]);if(2===t.length)return Math.floor(e()*(t[1]-t[0]))+t[0];throw Error("Invalid arguments")}function x(n){let{weightsAreNormalized:t=!1}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(0===n.length)throw Error("Weights array is empty");if(!1===t){let t=n.reduce((n,e)=>n+e,0),o=e()*t,i=0;for(let e=0;e<n.length;e++)if(o<(i+=n[e]))return e;return n.length-1}{let t=e(),o=0;for(let e=0;e<n.length;e++)if(t<(o+=n[e]))return e;return n.length-1}}let c={new:function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];return n().setRandom(...t)},setRandom:function(){for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];let[x,s=0]=r,l="string"==typeof s?i(s):s;if("parkmiller"===x){let n=o.Ts(l);e=()=>(n=o.K2(n),o.Tj(n)),t=e=>{n=o.Ts(e)}}else{if(void 0!==x&&"function"!=typeof x)throw Error("Invalid random function");e=null!=x?x:Math.random,t=()=>{}}return t(l),c},seed:function(n){return t("string"==typeof n?i(n):null!=n?n:0),c},get random(){return e},chance:function(n){return e()<n},number:r,float:r,f:r,sign:function(){return .5>e()?-1:1},int:a,i:a,hexColor:function(){let n=Math.floor(0xffffff*e());return"#".concat(n.toString(16).padStart(6,"0"))},pickIndex:x,pick:function(n,t){if(0===n.length)throw Error("Array is empty");if(t)return n[x(t)];let o=Math.floor(e()*n.length);return n[o]},createPicker:function(n){let e=n.map(n=>n[0]),t=n.map(n=>n[1]),o=e.reduce((n,e)=>n+e,0);for(let n=0;n<e.length;n++)e[n]/=o;return()=>t[x(e,{weightsAreNormalized:!0})]},direction2:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{x:0,y:0},t=e()*Math.PI*2;return n.x=Math.cos(t),n.y=Math.sin(t),n},direction3:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{x:0,y:0,z:0},t=e(),o=e(),i=2*Math.PI*t,r=Math.acos(1-2*o);return n.x=Math.sin(r)*Math.cos(i),n.y=Math.sin(r)*Math.sin(i),n.z=Math.cos(r),n},quaternion:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{x:0,y:0,z:0,w:1},t=e(),o=e(),i=e(),r=Math.sqrt(1-t),a=Math.sqrt(t);return n.x=r*Math.sin(2*Math.PI*o),n.y=r*Math.cos(2*Math.PI*o),n.z=a*Math.sin(2*Math.PI*i),n.w=a*Math.cos(2*Math.PI*i),n},shuffleIndexes:function*(n){if(n<=0)throw Error("N must be greater than 0");let t=0,o=Math.floor((2+2*e())*n);for(;1!==function(n,e){for(;0!==e;)[n,e]=[e,n%e];return n}(n,o);){if(++t>1e3)throw Error("Failed to find a suitable a value after 1000 attempts");o=n+Math.floor(e()*n)}let i=Math.floor(e()*n);for(let e=0;e<n;e++)yield(i+e*o)%n}};return c}()}}]);