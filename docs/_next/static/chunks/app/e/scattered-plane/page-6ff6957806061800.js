(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9697],{59856:function(e,t,n){Promise.resolve().then(n.t.bind(n,77601,23)),Promise.resolve().then(n.bind(n,1938))},1938:function(e,t,n){"use strict";n.d(t,{Client:function(){return _}});var i=n(41291),r=n(64740),s=n(32678),a=n(75952),o=n(56246),l=n(70928),c=n(62362),u=n(1050),p=n(47804),d=n(64556),f=n(27636),v=n(73437),m=n(7556),h=n(71441);class g{constructor(e,t,n,i){this.space=e,this.rect=t,this.uvRect=n,this.scatterCoeff=i,this.r0=f.T.random(),this.r1=f.T.random()}}class x{constructor(e,t){this.props={...x.defaultProps,...t};let{position:n,size:i,scatterPadding:r,sizeOptions:s,seed:a}=this.props,{col:o,row:l}=e.props;f.T.seed(a);let c=f.T.createPicker(s),u=Array.from({length:o}).map(c),p=Array.from({length:l}).map(c),{x:d,y:w}=(0,v.iK)(n),{x:y,y:S}=(0,v.iK)(i),z=new m.T(m.Nm.Horizontal).setSize(y,S).setOffset(d-y/2,w-S/2);for(let e of u){let t=new m.T(m.Nm.Vertical).setSize("".concat(e,"fr")).addTo(z);for(let e of p)new m.T(m.Nm.Horizontal).setSize("".concat(e,"fr")).addTo(t)}z.computeLayout();let D=z.rect,A=[...z.allLeaves({includeSelf:!1})],b=(y+S)/2,M=A.map(e=>{let t=e.rect.clone(),n=t.clone().relativeTo(D),{x:i,y:s}=t.getCenter(),a=(0,h.ii)(.5,1,(Math.abs(i-d)+Math.abs(s-w))/b);return t.centerX+=f.T.between(-r,r)*a,t.centerY+=f.T.between(-r,r)*a,new g(e,t,n,a)});this.root=z,this.nodes=M}}x.defaultProps={seed:87654,position:new r.Vector2(0,0),size:new r.Vector2(3,2),scatterPadding:.1,sizeOptions:[[.5,1],[1,10],[2,2],[3,1]]};var w=n(73987);class y extends r.LineSegments{clear(){return this.points.length=0,this.geometry.setFromPoints(this.points),this}rectangle(e){let{centerX:t,centerY:n,width:i,height:s}=w.Ae.from(e),a=i/2,o=s/2,l=new r.Vector2(t-a,n-o),c=new r.Vector2(t+a,n-o),u=new r.Vector2(t+a,n+o),p=new r.Vector2(t-a,n+o);return this.points.push(l,c,c,u,u,p,p,l),this.geometry.setFromPoints(this.points),this}constructor(...e){super(...e),this.points=[]}}var S=n(16516),z=n(42685),D=n(2164),A=n(68392),b=n(89425);class M extends r.Object3D{constructor(){super();let e=new r.HemisphereLight("#ffffff","#926969",1);this.add(e);let t=new r.DirectionalLight("#ffffff",2);this.add(t),t.position.set(2,4,1)}}class P extends r.MeshBasicMaterial{get mapAspect(){return this.uniforms.uMapInfo.value.x}set mapAspect(e){this.uniforms.uMapInfo.value.x=e}getScatteredSize(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new r.Vector2;return e.x=this.uniforms.uScatteredInfo.value.x,e.y=this.uniforms.uScatteredInfo.value.y,e}setScatteredSize(e){this.uniforms.uScatteredInfo.value.x=e.x,this.uniforms.uScatteredInfo.value.y=e.y}get scatteredSize(){return this.getScatteredSize()}set scatteredSize(e){this.setScatteredSize(e)}update(e){e*=.33,this.uniforms.uDispersionTime.value+=e*this.uniforms.uDispersion.value.x,this.uniforms.uLowDispersionTime.value+=e*this.uniforms.uLowDispersion.value.x}constructor(){super({side:r.DoubleSide}),this.uniforms={uDispersionTime:{value:0},uLowDispersionTime:{value:0},uDispersion:{value:new r.Vector4(1,-.6,.4,2)},uLowDispersion:{value:new r.Vector4(0,-.6,.4,0)},uMainParams:{value:new r.Vector4(1,0)},uCenter:{value:new r.Vector3},uMapInfo:{value:new r.Vector4(1,1,.5,.5)},uScatteredInfo:{value:new r.Vector4(1,1,0,0)},uNormalMap:{value:S.R.get("three").loadTexture("textures/rough_concrete_nor_gl_1k.jpg",e=>{e.wrapS=e.wrapT=r.RepeatWrapping})}},this.userData=function(e,t){for(let[n,i,r,s]of t)Object.defineProperty(e,"".concat(n,"_meta"),{enumerable:!0,value:s}),Object.defineProperty(e,n,{enumerable:!0,get:()=>i[r],set(e){i[r]=e}});return e}({},[["chunkScale",this.uniforms.uMainParams.value,"x","\n        Name(chunk.scale)\n        Slider(0, 1, step: any)\n      "],["imageVisibility",this.uniforms.uMainParams.value,"y","\n        Name(image.visibility)\n        Slider(0, 1, step: any)\n      "],["dispX",this.uniforms.uDispersion.value,"x","\n        Name(disp.x)\n        Slider(0, 1, step: any)\n      "],["dispY",this.uniforms.uDispersion.value,"y","\n        Name(disp.y)\n        Slider(-1, 1, step: any)\n      "],["dispZ",this.uniforms.uDispersion.value,"z","\n        Name(disp.z)\n        Slider(-1, 1, step: any)\n      "],["dispW",this.uniforms.uDispersion.value,"w","\n        Name(disp.cycle)\n        Slider(1, 20, step: 1)\n      "],["lowDispX",this.uniforms.uLowDispersion.value,"x","\n        Name(lowDisp.x)\n        Slider(0, 1, step: any)\n      "]]),this.onBeforeCompile=e=>z.b.with(e).defines({USE_UV:""}).uniforms(this.uniforms).varying({vRand:"vec4"}).vertex.top(A.U,D.i,'\n  // sizeMode: 0 for "contain", 1 for "cover"\n  vec2 applyUvSize(vec2 uv, float outerAspect, float innerAspect, float sizeMode, vec2 align, vec2 scale) {\n    align.y = 1.0 - align.y; // Flip y-coordinate\n    if ((outerAspect > innerAspect) != (sizeMode == 1.0)) { // XOR condition for mode\n      float scaleFactor = outerAspect / innerAspect;\n      uv.x = (uv.x - align.x) * scaleFactor + align.x; // Adjust x-coordinate\n    } else {\n      float scaleFactor = innerAspect / outerAspect;\n      uv.y = (uv.y - align.y) * scaleFactor + align.y; // Adjust y-coordinate\n    }\n    uv = (uv - align) / scale + align;\n    return uv;\n  }\n\n  vec2 applyUvSize(vec2 uv, float outerAspect, float innerAspect, float sizeMode, vec2 align, float scale) {\n    return applyUvSize(uv, outerAspect, innerAspect, sizeMode, align, vec2(scale));\n  }\n\n  vec2 applyUvSize(vec2 uv, float outerAspect, float innerAspect, float sizeMode, vec2 align) {\n    return applyUvSize(uv, outerAspect, innerAspect, sizeMode, align, vec2(1.0));\n  }\n\n  vec2 applyUvSize(vec2 uv, float outerAspect, float innerAspect, float sizeMode) {\n    return applyUvSize(uv, outerAspect, innerAspect, sizeMode, vec2(0.5));\n  }\n\n  vec2 applyUvSize(vec2 uv, float outerAspect, float innerAspect) {\n    return applyUvSize(uv, outerAspect, innerAspect, 1.0);\n  }\n').vertex.top("\n        attribute vec4 aRectUv;\n        attribute vec4 aRand;\n      ").vertex.top("\n        vec2 delta;\n        float scatterRatio;\n\n        vec4 computeDispersion() {\n          if (uDispersion.x == 0.0) {\n            return vec4(0.0, 0.0, 0.0, 1.0);\n          }\n\n          float duration = lerp(8.0, 1.0, aRand.x * aRand.y * aRand.z);\n          float cycleCount = max(floor(uDispersion.w), 1.0);\n          float time = mod(uDispersionTime + duration * cycleCount * aRand.x, duration * cycleCount) / duration;\n          float cycleVisibility = time <= 1.0 ? 1.0 : easeInOut3(1.0 - inverseLerp(.8 * aRand.w + .1, .8 * aRand.w + .2, uDispersion.x));\n          time = mod(time, 1.0);\n          float size = easeInThenOut(time, 8.0) * lerp(2.0, 1.0, time * time) * cycleVisibility;\n          size = mix(1.0, size, pow(uDispersion.x, 1.0 / 2.0));\n\n          // Apply scale before instanceMatrix (shrinking).\n          vec3 dispersed;\n          dispersed.xy = -delta * lerp(uDispersion.y, uDispersion.z, time);\n          dispersed.z = lerp(1.0, 0.0, time);\n          dispersed *= uDispersion.x;\n\n          return vec4(dispersed, size);\n        }\n\n        float getStartEffect(float time, float duration) {\n          return min(1.0, time / duration);\n        }\n\n        float getEndEffect(float time, float timeMax, float duration) {\n          return max(0.0, time - (timeMax - duration)) / duration;\n        }\n\n        vec4 computeLowDispersion() {\n          if (uLowDispersion.x == 0.0) {\n            return vec4(0.0, 0.0, 0.0, 1.0);\n          }\n\n          float periodScalarT = inverseLerp(0.1, 0.9, scatterRatio);\n          float period = lerp(2.0, 8.0, aRand.x) * lerp(60.0, 1.0, periodScalarT);\n          float time = mod(uLowDispersionTime + period * aRand.z, period);\n\n          float duration = 1.0;\n          float effectStart = min(1.0, time);\n          float effectEnd = getEndEffect(time, period, duration);\n\n          float size = getStartEffect(time, 0.3) * (1.0 - getEndEffect(time, period, 0.3));\n          size = pow(size, 1.0 / 4.0);\n          size = mix(1.0, size, pow(uLowDispersion.x, 1.0 / 4.0));\n\n          vec3 dispersed;\n\n          dispersed.xy = delta * 0.1;\n          dispersed.z = 0.2;\n          dispersed.xyz *= getEndEffect(time, period, 1.0);\n          dispersed *= uLowDispersion.x;\n\n          return vec4(dispersed, size);\n        }\n      ").vertex.replace("project_vertex","\n        vec4 mvPosition = vec4(position, 1.0);\n        delta = instanceMatrix[3].xy - uCenter.xy;\n        scatterRatio = clamp(1.1 * length(delta) / (length(uScatteredInfo.xy) / 2.0), 0.0, 1.0);\n\n        vec4 dispersion = computeDispersion();\n        vec4 lowDispersion = computeLowDispersion();\n\n        float scale = clamp01(uMainParams.x * 3.0 - 2.0 * aRand.w);\n        mvPosition.xyz *= dispersion.w * lowDispersion.w * easeInOut3(scale);\n\n        mvPosition = instanceMatrix * mvPosition;\n        mvPosition.xyz += dispersion.xyz + lowDispersion.xyz;\n\n        mvPosition = modelViewMatrix * mvPosition;\n        gl_Position = projectionMatrix * mvPosition;      \n      ").vertex.replace("uv_vertex","\n        #if defined( USE_UV ) || defined( USE_ANISOTROPY )\n          vUv = vec3( uv, 1 ).xy;\n          vUv = aRectUv.xy + aRectUv.zw * vUv;\n        #endif\n        #ifdef USE_MAP\n          vec2 instanceUv = aRectUv.xy + aRectUv.zw * MAP_UV;\n\n          // vec2 uv, float outerAspect, float innerAspect, float sizeMode, vec2 align, vec2 scale\n          float outerAspect = uScatteredInfo.x / uScatteredInfo.y;\n          float innerAspect = uMapInfo.x;\n          float sizeMode = uMapInfo.y;\n          vec2 align = uMapInfo.zw;\n          instanceUv = applyUvSize(instanceUv, outerAspect, innerAspect, sizeMode, align, vec2(1.0));\n          \n          vMapUv = ( mapTransform * vec3( instanceUv, 1 ) ).xy;\n        #endif\n      ").vertex.mainAfterAll("\n        vRand = aRand;\n      ").fragment.top(A.U,D.i).fragment.replace("color_fragment","\n        vec3 normal = texture2D(uNormalMap, vUv * 4.0).rgb;\n        vec3 light = normalize(vec3(0.5, 2.5, 1.0));\n        float colorAlteration = mix(0.333, 1.0, dot(normal, light));\n        float transition = inverseLerp(0.0, 0.2, uMainParams.y - 0.8 * vRand.w);\n        diffuseColor.rgb = mix(vColor * colorAlteration, diffuseColor.rgb, transition);\n      ")}}class R extends r.Object3D{static createPlane(e){let{row:t,col:n}=e,i=t*n,s=new r.PlaneGeometry,a=new r.InstancedBufferAttribute(new Float32Array(4*i),4);s.setAttribute("aRectUv",a);let o=new r.InstancedBufferAttribute(new Float32Array(4*i),4);s.setAttribute("aRand",o);for(let e=0;e<i;e++)o.setXYZW(e,f.T.random(),f.T.random(),f.T.random(),f.T.random());let l=new P,c=new r.InstancedMesh(s,l,i);return c.name="plane",c}get count(){return this.internal.count}onTick(e){this.internal.plane.material.update(e.deltaTime)}getDistribution(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new x(this,e)}drawDistribution(e){let{position:t,size:n,scatterPadding:i}=e.props,{x:r,y:s}=(0,v.iK)(t),{x:a,y:o}=(0,v.iK)(n);this.internal.lineHelper.rectangle([r,s,a,o]).rectangle([r,s,a+2*i,o+2*i])}distribute(e){let{count:t,plane:n}=this.internal,{aRectUv:i}=n.geometry.attributes;for(let r=0;r<t;r++){let{rect:t,uvRect:s}=e.nodes[r];n.setMatrixAt(r,(0,d.$)({position:t.getCenter(),scale:t.getSize()})),i.setXYZW(r,s.x,s.y,s.width,s.height)}n.material.setScatteredSize(e.root.rect.getSize());let r=e.root.rect;n.material.setScatteredSize(r.getSize()),n.material.uniforms.uCenter.value.copy(r.getCenter())}lerpDistribute(e,t,n){let{count:i,plane:s}=this.internal,{aRectUv:a}=s.geometry.attributes,o=new w.Ae,l=new w.Ae,c=new w.Ae,u=new r.Vector3,p=new r.Vector3;for(let r=0;r<i;r++){let i=e.nodes[r],c=t.nodes[r],f=.3*(1-i.r0*(i.scatterCoeff+.2*c.r0)),v=(0,h.ii)(f,.7+f,n),m=(0,b.xD)(v);o.lerpRectangles(i.rect,c.rect,m),l.lerpRectangles(i.uvRect,c.uvRect,m),s.setMatrixAt(r,(0,d.$)({position:o.getCenter(u),scale:o.getSize(p),rotationY:(c.r0<.5?0:1)*m*Math.PI*2,rotationZ:.3*Math.sin(v*Math.PI)*(-1+2*i.r0)})),a.setXYZW(r,l.x,l.y,l.width,l.height)}let f=(0,b.uN)((0,h.ii)(.3,.7,n));c.lerpRectangles(e.root.rect,t.root.rect,f),s.material.setScatteredSize(c.getSize()),s.material.uniforms.uCenter.value.copy(c.getCenter()),s.instanceMatrix.needsUpdate=!0,a.needsUpdate=!0}constructor(e={}){super(),this.transition=0;let t={...R.defaultProps,...e},{col:n,row:i}=t,r=R.createPlane(t);(0,o.bB)(r,this);let s=new y;(0,o.bB)(s,this);let a=new M;(0,o.bB)(a,this),this.internal={count:i*n,plane:r,lineHelper:s,lightSetup:a},this.props=t,this.distribute(this.getDistribution())}}R.displayName="ScatteredPlane",R.defaultProps={row:20,col:30,imageAspect:1,imageResizeMode:"cover"},R.transition_meta="Range(0, 1)";class U extends r.Mesh{constructor(){super(new r.IcosahedronGeometry(40,1),new r.MeshBasicMaterial({color:"#aeb4e9",side:r.BackSide})),this.onBeforeRender=(e,t,n)=>{this.position.copy(n.position)}}}let T={darkBlue:"#002c52",orange:"#ff5c35",white:"#ffffff",lightGrey:"#c9cfd3"};function C(){let e=(0,c.jE)();return e.three.pipeline.basicPasses.outline.enabled=!1,(0,p._v)("ScatteredDemo",async function*(t,n){(0,o.bB)(new U,t),(0,o.bB)(new r.Mesh(new s.w,new a.P),t);let i=await n.loader.load("/images/DebugTexture.png");i.colorSpace=r.SRGBColorSpace;let c=(0,o.bB)(new R,t);c.internal.plane.material.map=i,c.internal.plane.material.mapAspect=i.image.width/i.image.height;let u=c.getDistribution({seed:4789,position:[-2,0],size:[2,3]}),p=c.getDistribution({seed:3249,position:[2,0],size:[2,4]});c.drawDistribution(u),c.drawDistribution(p),t.userData.transition=0,t.userData.transition_meta="Slider(0, 1, step: 0.01)",t.userData.scale=1,t.userData.scale_meta="Slider(-1, 1, pow: 10, step: .1)",t.userData.links=[c.internal.plane.material.userData];let v=Object.values(T);for(let e=0,t=c.count;e<t;e++)c.internal.plane.setColorAt(e,(0,d.E)(f.T.pick(v)));yield n.onTick(()=>{c.lerpDistribute(u,p,t.userData.transition),c.scale.setScalar(t.userData.scale)}),(0,l.v)(e,t),e.sceneSelection.add("Select ScatteredDemo",t)},[]),null}function I(){return(0,p.Ky)(function*(e){e.useOrbitControls({position:[-2,0,8],target:[-2,0,0]})},[]),null}function V(e){let{children:t}=e,n=(0,p.Ky)();return(0,i.jsx)(c.KU,{three:n,backgroundColor:"#26163c4f",children:t})}function _(){return(0,i.jsxs)("div",{className:"layer thru",children:[(0,i.jsx)(u.Leak,{}),(0,i.jsx)(p.H7,{children:(0,i.jsxs)(V,{children:[(0,i.jsx)("div",{className:"layer thru px-3 py-2 flex flex-col gap-4",children:(0,i.jsx)("h1",{className:"text-4xl",children:"ScatteredPlane"})}),(0,i.jsx)(I,{}),(0,i.jsx)(C,{})]})})]})}},1050:function(e,t,n){"use strict";n.d(t,{Leak:function(){return a}});var i=n(80590),r=n(45003),s=n(27636);function a(){return Object.assign(window,{...r,...i,PRNG:s.T}),null}},89425:function(e,t,n){"use strict";n.d(t,{C:function(){return h},EJ:function(){return s},JT:function(){return y},JZ:function(){return d},Kt:function(){return u},SU:function(){return l},TY:function(){return x},Vq:function(){return p},b6:function(){return o},kg:function(){return a},m3:function(){return c},mZ:function(){return m},ry:function(){return v},uN:function(){return g},uw:function(){return f},xD:function(){return w}});let i=e=>e<0?0:e>1?1:e,r=e=>i(e),s=r,a=e=>(e=i(e))*e,o=e=>(e=i(e))*e*e,l=e=>(e=i(e))*e*e*e,c=e=>(e=i(e))*e*e*e*e,u=r,p=e=>1-(e=i(1-e))*e,d=e=>1-(e=i(1-e))*e*e,f=e=>1-(e=i(1-e))*e*e*e,v=e=>1-(e=i(1-e))*e*e*e*e,m=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5;return e<0?0:e>1?1:e<n?1/Math.pow(n,t-1)*Math.pow(e,t):1-1/Math.pow(1-n,t-1)*Math.pow(1-e,t)},h=r,g=e=>e<0?0:e>1?1:e<.5?2*e*e:1-2*(e=1-e)*e,x=e=>e<0?0:e>1?1:e<.5?4*e*e*e:1-4*(e=1-e)*e*e,w=e=>e<0?0:e>1?1:e<.5?8*e*e*e*e:1-8*(e=1-e)*e*e*e,y=e=>e<0?0:e>1?1:e<.5?16*e*e*e*e*e:1-16*(e=1-e)*e*e*e*e}},function(e){e.O(0,[8960,5244,8423,3662,7579,893,2290,7601,1943,6626,6028,550,5003,8558,6098,1658,3510,1744],function(){return e(e.s=59856)}),_N_E=e.O()}]);