"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5204],{14203:(e,n,t)=>{t.d(n,{O:()=>C});var a=t(1029);let C="\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat permute(float x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat taylorInvSqrt(float r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n\n\n\n\n// 2D:\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n		+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// 3D: \n\nfloat snoise(vec3 v)\n{ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n// 4D:\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n						\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v) {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n  // First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n  // Other corners\n\n  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n  //  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n  //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n  // Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n  // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n  // Mix contributions from the five corners\n  vec3 m0 = max(0.57 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.57 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 60.1 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n\n\n\n// addons:\n// Fractal noise, based on Stefan Gustavson's Simplex noise\n".concat((0,a.N)(["vec2","vec3","vec4"],"\n  float fnoise(T p, int octaves, float persistence) {\n    float total = 0.0;           // Final noise value\n    float amplitude = 1.0;       // Initial amplitude\n    float frequency = 1.0;       // Initial frequency\n    float maxValue = 0.0;        // Used for normalization\n\n    for (int i = 0; i < octaves; i++) {\n      total += snoise(p * frequency) * amplitude;\n\n      maxValue += amplitude;   // Keep track of max amplitude\n      amplitude *= persistence; // Reduce amplitude for next octave\n      frequency *= 2.0;        // Increase frequency for next octave\n    }\n\n    // Normalize the result to stay within the range [0, 1]\n    return total / maxValue;\n  }\n\n  float fnoise(T p, int octaves) {\n    return fnoise(p, octaves, 0.5);\n  }\n\n  float fnoise(T p) {\n    return fnoise(p, 4, 0.5);\n  }\n"),"\n\nfloat snoiseFast4D(vec4 p) {\n  const float SCALAR = 0.01;\n  float a = SCALAR * dot(p.xy * 0.3, vec2(-127.1, 311.7));\n  float b = SCALAR * dot(p.zw * 0.8, vec2(269.5, -183.3));\n  float c = SCALAR * dot(p.wx * 6.0, vec2(23.14069, 2.665157));\n  float d = SCALAR * dot(p.zy * 1.3, vec2(-12.9898, 78.233));\n  return (snoise(vec2(a, b)) + snoise(vec2(d, c))) * 0.5;\n}\n\nfloat fnoiseFast4D(vec4 p, int octaves, float persistence) {\n  float total = 0.0;           // Final noise value\n  float amplitude = 1.0;       // Initial amplitude\n  float frequency = 1.0;       // Initial frequency\n  float maxValue = 0.0;        // Used for normalization\n\n  for (int i = 0; i < octaves; i++) {\n    total += snoiseFast4D(p * frequency) * amplitude;\n\n    maxValue += amplitude;   // Keep track of max amplitude\n    amplitude *= persistence; // Reduce amplitude for next octave\n    frequency *= 2.0;        // Increase frequency for next octave\n  }\n\n  // Normalize the result to stay within the range [0, 1]\n  return total / maxValue;\n}\n")},22899:(e,n,t)=>{t.d(n,{I:()=>i});var a=t(65927);let C=["linear"];for(let e=1;e<=10;e++)C.push("easeIn".concat(e)),C.push("easeOut".concat(e)),C.push("easeInOut".concat(e)),C.push("easeOutIn".concat(e));let i="\n#ifndef GLSL_EASING\n#define GLSL_EASING\n\n".concat(a.S,"\n\nfloat easePow1(float x) {\n  return x;\n}\n\nfloat easePow2(float x) {\n  return x * x;\n}\n\nfloat easePow3(float x) {\n  return x * x * x;\n}\n\nfloat easePow4(float x) {\n  x *= x;\n  return x *= x;\n}\n\nfloat easePow5(float x) {\n  float x0 = x;\n  x *= x;\n  x *= x;\n  return x0 * x;\n}\n\nfloat easePow6(float x) {\n  x *= x * x;\n  return x *= x;\n}\n\nfloat easePow7(float x) {\n  float x0 = x;\n  x *= x * x;\n  x *= x;\n  return x0 * x;\n}\n\nfloat easePow8(float x) {\n  x *= x;\n  x *= x;\n  return x *= x;\n}\n\nfloat easePow9(float x) {\n  x *= x * x;\n  return x *= x * x;\n}\n\nfloat easePow10(float x) {\n  float x0 = x;\n  x *= x * x;\n  x *= x * x;\n  return x0 * x;\n}\n\nfloat linear(float x) {\n  return clamp01(x);\n}\n\n").concat(Array.from({length:10},(e,n)=>{let t=n+1;return"\n\n  float easeIn".concat(t," (float x) {\n    return easePow").concat(t,"(clamp01(x));\n  }\n  float easeOut").concat(t," (float x) {\n    return 1.0 - easePow").concat(t,"(clamp01(1.0 - x));\n  }\n  float easeInOut").concat(t," (float x) {\n    return x < 0.5 \n      ? 0.5 * easePow").concat(t,"(2.0 * x) \n      : 1.0 - 0.5 * easePow").concat(t,"(2.0 * (1.0 - x));\n  }\n  float easeOutIn").concat(t," (float x) {\n    return x < 0.5\n      ? 0.5 * (1.0 - easePow").concat(t,"(1.0 - x * 2.0))\n      : 1.0 - 0.5 * (1.0 - easePow").concat(t,"(2.0 * x - 1.0));\n  }\n\n").trim()}).join("\n\n"),"\n\n\n// https://www.desmos.com/calculator/mqou4lf9zc?lang=fr\nfloat easeInOut(float x, float p, float i) {\n  return  x <= 0.0 ? 0.0 :\n          x >= 1.0 ? 1.0 :\n          x <= i ? 1.0 / pow(i, p - 1.0) * pow(x, p) :\n          1.0 - 1.0 / pow(1.0 - i, p - 1.0) * pow(1.0 - x, p);\n}\n\n// https://www.desmos.com/calculator/nrjlezusdv\nfloat easeInThenOut(float x, float p) {\n  return 1.0 - pow(abs(2.0 * x - 1.0), p);\n}\n\n#endif\n")},35204:(e,n,t)=>{t.d(n,{ClientPage:()=>M});var a=t(70691),C=t(53097),i=t(79911),o=t(77794),l=t(49797),r=t(79782),c=t(38921),s=t(31763),x=t(61572),u=t(77515),v=t(7147),f=t(73446),p=t(22899),d=t(55227),m=t(14203),h=t(8144),y=t(79285),H=t(67235),w=t(33589);function g(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:512,a=new Blob([e],{type:"image/svg+xml"}),C=URL.createObjectURL(a),i=new Image,o=document.createElement("canvas");o.width=n,o.height=t;let r=o.getContext("2d"),c=new l.GYF(new Uint8Array(64).fill(255),4,4);c.generateMipmaps=!0,c.minFilter=l.NZq,c.magFilter=l.k6q;let s=(0,w.F)(c);return i.onload=()=>{r.transform(1,0,0,-1,0,t),r.drawImage(i,0,0,n,t),URL.revokeObjectURL(C),s.image={data:r.getImageData(0,0,n,t).data,width:n,height:t},s.needsUpdate=!0,s.resolve()},i.onerror=e=>{s.reject(e)},i.src=C,s}function b(e,n,t){return null!=t||(t=new l.I9Y),e>1?(t.x=n,t.y=n/e):(t.x=n*e,t.y=n),t}class V extends l.YJl{initialize(e){let n=new l.I9Y,t=b(1,150),a=new x.S({size:t,viscosity:.995}).initialize(e.renderer),C=(0,i.mj)(new l.eaF(new l.bdM,new l.V9B),this),o={uTime:{value:0},uViewportSize:{value:new l.I9Y},uWater:{value:a.currentTexture()},uImageFill:{value:this.imageFill},uImageStroke:{value:this.imageStroke},uScale:{value:.7},uNormalMap:{value:u.e.loadTexture("/assets/textures/paper002_1K_NormalGL.jpg")}};o.uNormalMap.value.wrapS=o.uNormalMap.value.wrapT=l.GJx,C.material.onBeforeCompile=e=>v.bI.with(e).uniforms(o).defines({USE_UV:""}).fragment.top(h.H,d.M,f.x,m.O,p.I).fragment.after("map_fragment","\n        float aspect = uViewportSize.x / uViewportSize.y;\n        // vec2 imageUv = (vUv - 0.5) / vec2(1.0, aspect) + 0.5;\n        vec2 imageUv = (vUv - 0.5) * vec2(aspect, 1.0) / uScale + 0.5;\n        vec4 stroke = texture2D(uImageStroke, imageUv);\n        vec4 fill = texture2D(uImageFill, imageUv);\n        float inside = mix(0.0, 1.0, max(stroke.a, fill.a));\n        vec4 water = texture2D(uWater, vUv + 0.05 * inside);\n\n        float variation = spow(water.r * 0.1, 4.0) * 0.4;\n        variation = slimited(variation, 1.0);\n        Vec3Ramp r = ramp(0.5 + variation * 0.5, \n          ".concat((0,v.eR)("#ff773dff")," * 4.0, \n          ").concat((0,v.eR)("#eadc73ff"),", \n          ").concat((0,v.eR)("#000000"),", \n          ").concat((0,v.eR)("#71ebcaff"),",\n          ").concat((0,v.eR)("#7aa4ffff")," * 1.5);\n        diffuseColor.rgb = mix(r.a, r.b, r.t);\n\n        float strokeVisibilityIdle = pow(inverseLerp(-1.2, 1.0, snoise(vec3(imageUv * 0.8, uTime * 0.2))) * inverseLerp(-1.2, 1.0, snoise(vec3(imageUv * 1.8 + 1.2, uTime * 0.2))), 4.0);\n        float strokeVisibilityMove = clamp01(pow(abs(water.r) * 0.2, 8.0) * 0.05);\n        float strokeVisibility = stroke.a * max(strokeVisibilityIdle, strokeVisibilityMove);\n        diffuseColor.rgb = screenBlending(diffuseColor.rgb, vec3(1.0) * strokeVisibility);\n        diffuseColor.a = 1.0;\n\n        // Add some fake lighting\n        vec3 normalMap = texture2D(uNormalMap, imageUv * 1.0).xyz * 2.0 - 1.0;\n        normalMap.y *= -1.0;\n        vec3 normal = normalize(vec3(normalMap.x, normalMap.y, 1.0));\n        vec3 lightDir = normalize(vec3(-1.0, 1.0, -1.0));\n        float light = clamp01(dot(normal, lightDir) * 0.5 + 0.5);\n        light = easeInOut(light, 10.0, 1.0);\n        diffuseColor.rgb += vec3(light);\n        diffuseColor.a = 1.0;\n      "));let r=H.Q.send(s.n).assertPayload();return e.onTick({frameDelay:2},i=>{let l=e.aspect>=1?1:.7;o.uScale.value=l,o.uTime.value+=i.deltaTime;let{realSize:c}=r.dampedVertigo.state;o.uViewportSize.value.set(c.width,c.height);let s=e.pointer.intersectPlane("xy");s.intersected&&n.set((0,y.inverseLerp)(-c.width/2,c.width/2,s.point.x),(0,y.inverseLerp)(-c.height/2,c.height/2,s.point.y)),b(c.x/c.y,150,t),a.setSize(t),a.pointer(n.x,n.y,5,+!!e.pointer.buttonDown()),a.update(i.deltaTime),o.uWater.value=a.currentTexture(),C.scale.set(c.width,c.height,1)}),this}constructor(){super(),this.name="home-text";let e=new r.c().parse('\n<svg width="1024" height="1024" viewBox="0 0 1024 1024" fill="none"\n  xmlns="http://www.w3.org/2000/svg">\n  <g id="homeTextSvg">\n    \x3c!-- <rect width="1024" height="1024" fill="white"/> --\x3e\n    <g id="visual">\n      <path d="M102.256 493.033L36.0723 275.8H77.8723L123.472 431.283H124.739L169.706 275.8H209.289L143.106 493.033H102.256Z" fill="black"/>\n      <path d="M225.083 493.033V275.8H265.616V493.033H225.083Z" fill="black"/>\n      <path d="M365.853 496.833C352.553 496.833 340.203 494.3 328.803 489.233C317.403 484.167 308.22 476.672 301.253 466.75C294.287 456.617 290.803 444.161 290.803 429.383C290.803 428.117 290.803 426.85 290.803 425.583C291.015 424.317 291.12 423.261 291.12 422.417H333.237C333.237 422.628 333.131 423.367 332.92 424.633C332.92 425.689 332.92 426.639 332.92 427.483C332.92 437.828 335.981 446.167 342.103 452.5C348.226 458.833 356.776 462 367.753 462C379.998 462 388.548 459.361 393.403 454.083C398.259 448.594 400.687 442.683 400.687 436.35C400.687 428.961 398.787 423.05 394.987 418.617C391.187 414.183 386.12 410.594 379.787 407.85C373.665 404.894 366.803 402.256 359.203 399.933C351.815 397.611 344.32 394.972 336.72 392.017C329.12 389.061 322.153 385.261 315.82 380.617C309.698 375.761 304.737 369.533 300.937 361.933C297.137 354.333 295.237 344.622 295.237 332.8C295.237 319.078 298.615 307.783 305.37 298.917C312.126 289.839 320.992 283.083 331.97 278.65C343.159 274.217 355.087 272 367.753 272C380.631 272 392.348 274.217 402.903 278.65C413.67 283.083 422.22 290.05 428.553 299.55C435.098 308.839 438.37 320.978 438.37 335.967V339.767H396.887V336.917C396.887 327.628 394.248 320.344 388.97 315.067C383.903 309.578 376.726 306.833 367.437 306.833C357.726 306.833 350.231 309.05 344.953 313.483C339.676 317.706 337.037 323.194 337.037 329.95C337.037 336.283 338.937 341.35 342.737 345.15C346.537 348.95 351.498 352.117 357.62 354.65C363.953 357.183 370.92 359.611 378.52 361.933C386.12 364.044 393.615 366.578 401.003 369.533C408.603 372.489 415.465 376.394 421.587 381.25C427.92 385.894 432.987 392.017 436.787 399.617C440.587 407.006 442.487 416.4 442.487 427.8C442.487 444.478 439.215 457.883 432.67 468.017C426.126 477.939 417.048 485.222 405.437 489.867C394.037 494.511 380.842 496.833 365.853 496.833Z" fill="black"/>\n      <path d="M548.214 496.833C524.992 496.833 506.731 490.817 493.431 478.783C480.342 466.539 473.797 448.594 473.797 424.95V275.8H514.331V423.683C514.331 436.139 517.286 445.639 523.197 452.183C529.108 458.728 537.447 462 548.214 462C558.981 462 567.319 458.728 573.231 452.183C579.353 445.639 582.414 436.139 582.414 423.683V275.8H622.947V424.95C622.947 448.594 616.297 466.539 602.997 478.783C589.697 490.817 571.436 496.833 548.214 496.833Z" fill="black"/>\n      <path d="M641.883 493.033L711.866 275.8H759.049L829.033 493.033H787.549L774.25 450.283H694.133L681.15 493.033H641.883ZM705.216 414.183H763.166L741.316 341.667C740.261 337.867 739.205 333.644 738.15 329C737.094 324.356 736.25 320.45 735.616 317.283C735.194 313.906 734.983 312.217 734.983 312.217H733.716C733.716 312.217 733.4 314.011 732.766 317.6C732.133 320.978 731.288 324.989 730.233 329.633C729.388 334.278 728.438 338.289 727.383 341.667L705.216 414.183Z" fill="black"/>\n      <path d="M848.285 493.033V275.8H888.819V455.033H980.652V493.033H848.285Z" fill="black"/>\n    </g>\n    <g id="tech">\n      <path d="M226.378 688.033V506.9H172.545V470.8H320.745V506.9H266.912V688.033H226.378Z" fill="black"/>\n      <path d="M344.804 688.033V470.8H483.188V506.9H385.338V558.833H469.254V594.933H385.338V651.933H485.088V688.033H344.804Z" fill="black"/>\n      <path d="M596.198 691.833C568.965 691.833 547.748 682.65 532.548 664.283C517.348 645.917 509.748 617.628 509.748 579.417C509.748 540.994 517.348 512.706 532.548 494.55C547.748 476.183 568.965 467 596.198 467C611.398 467 625.015 469.956 637.048 475.867C649.081 481.778 658.581 490.961 665.548 503.417C672.515 515.872 675.998 531.917 675.998 551.55H634.515C634.515 534.661 630.926 522.206 623.748 514.183C616.781 505.95 607.598 501.833 596.198 501.833C581.209 501.833 570.02 508.061 562.631 520.517C555.242 532.761 551.548 549.756 551.548 571.5V587.333C551.548 609.078 555.348 626.178 562.948 638.633C570.548 650.878 582.054 657 597.465 657C609.287 657 618.681 652.989 625.648 644.967C632.826 636.733 636.415 624.278 636.415 607.6H675.998C675.998 626.6 672.515 642.328 665.548 654.783C658.581 667.239 649.081 676.528 637.048 682.65C625.226 688.772 611.609 691.833 596.198 691.833Z" fill="black"/>\n      <path d="M705.384 688.033V470.8H745.917V558.833H814.317V470.8H854.85V688.033H814.317V594.933H745.917V688.033H705.384Z" fill="black"/>\n      <path d="M888.036 688.033V644.65H931.736V688.033H888.036Z" fill="black"/>\n    </g>\n    <g id="baseline">\n      <path d="M257.471 747.033V730.569H262.823C264.871 730.569 266.479 731.241 267.647 732.585C268.831 733.913 269.423 735.905 269.423 738.561C269.423 741.377 268.831 743.497 267.647 744.921C266.479 746.329 264.871 747.033 262.823 747.033H257.471ZM260.543 744.297H262.535C263.671 744.297 264.575 743.873 265.247 743.025C265.919 742.161 266.255 740.873 266.255 739.161V737.961C266.255 736.409 265.919 735.249 265.247 734.481C264.575 733.697 263.671 733.305 262.535 733.305H260.543V744.297Z" fill="black"/>\n      <path d="M280.722 747.321C279.106 747.321 277.874 746.793 277.026 745.737C276.194 744.665 275.778 742.993 275.778 740.721C275.778 738.449 276.194 736.785 277.026 735.729C277.874 734.657 279.074 734.121 280.626 734.121C282.146 734.121 283.282 734.657 284.034 735.729C284.802 736.785 285.186 738.449 285.186 740.721V741.441H278.778C278.794 742.561 278.946 743.433 279.234 744.057C279.522 744.665 280.018 744.969 280.722 744.969C281.218 744.969 281.61 744.761 281.898 744.345C282.186 743.913 282.33 743.321 282.33 742.569H285.186C285.186 744.185 284.762 745.385 283.914 746.169C283.066 746.937 282.002 747.321 280.722 747.321ZM278.802 739.353H282.162C282.162 738.441 282.034 737.737 281.778 737.241C281.538 736.729 281.154 736.473 280.626 736.473C280.018 736.473 279.57 736.729 279.282 737.241C279.01 737.737 278.85 738.441 278.802 739.353Z" fill="black"/>\n      <path d="M296.155 747.321C295.195 747.321 294.371 747.153 293.683 746.817C292.995 746.481 292.467 746.017 292.099 745.425C291.747 744.817 291.571 744.113 291.571 743.313C291.571 743.249 291.571 743.185 291.571 743.121C291.587 743.057 291.595 743.025 291.595 743.025H294.523V743.193C294.539 743.865 294.731 744.329 295.099 744.585C295.467 744.841 295.851 744.969 296.251 744.969C296.635 744.969 297.011 744.873 297.379 744.681C297.747 744.473 297.931 744.113 297.931 743.601C297.931 743.153 297.779 742.817 297.475 742.593C297.187 742.353 296.803 742.169 296.323 742.041C295.859 741.897 295.363 741.753 294.835 741.609C294.323 741.465 293.827 741.265 293.347 741.009C292.883 740.737 292.499 740.369 292.195 739.905C291.907 739.425 291.763 738.777 291.763 737.961C291.763 737.097 291.963 736.385 292.363 735.825C292.763 735.249 293.307 734.825 293.995 734.553C294.683 734.265 295.443 734.121 296.275 734.121C297.075 734.121 297.795 734.257 298.435 734.529C299.091 734.801 299.603 735.193 299.971 735.705C300.355 736.217 300.547 736.833 300.547 737.553C300.547 737.681 300.539 737.801 300.523 737.913C300.523 738.025 300.523 738.089 300.523 738.105H297.595V738.057C297.579 737.497 297.443 737.097 297.187 736.857C296.947 736.601 296.611 736.473 296.179 736.473C295.891 736.473 295.635 736.529 295.411 736.641C295.187 736.737 295.011 736.881 294.883 737.073C294.755 737.249 294.691 737.465 294.691 737.721C294.691 738.121 294.835 738.425 295.123 738.633C295.427 738.841 295.811 739.009 296.275 739.137C296.755 739.265 297.251 739.401 297.763 739.545C298.291 739.673 298.787 739.873 299.251 740.145C299.731 740.401 300.115 740.777 300.403 741.273C300.707 741.753 300.859 742.409 300.859 743.241C300.859 744.265 300.651 745.073 300.235 745.665C299.835 746.257 299.275 746.681 298.555 746.937C297.851 747.193 297.051 747.321 296.155 747.321Z" fill="black"/>\n      <path d="M307.82 747.033V734.409H310.7V747.033H307.82ZM307.796 732.441V729.681H310.7V732.441H307.796Z" fill="black"/>\n      <path d="M319.953 751.401C319.185 751.401 318.529 751.129 317.985 750.585C317.441 750.057 317.169 749.361 317.169 748.497C317.169 747.873 317.321 747.353 317.625 746.937C317.945 746.521 318.329 746.185 318.777 745.929C318.473 745.737 318.225 745.481 318.033 745.161C317.857 744.841 317.769 744.465 317.769 744.033C317.769 743.473 317.953 743.009 318.321 742.641C318.689 742.273 319.121 742.001 319.617 741.825C319.121 741.457 318.737 740.985 318.465 740.409C318.209 739.817 318.081 739.153 318.081 738.417C318.081 737.121 318.481 736.081 319.281 735.297C320.081 734.513 321.233 734.121 322.737 734.121C323.553 734.121 324.257 734.241 324.849 734.481C325.329 734.129 325.649 733.737 325.809 733.305C325.985 732.857 326.073 732.521 326.073 732.297H328.449C328.449 733.193 328.265 733.905 327.897 734.433C327.545 734.961 327.049 735.321 326.409 735.513C326.729 735.865 326.977 736.289 327.153 736.785C327.329 737.281 327.417 737.825 327.417 738.417C327.417 739.713 327.017 740.753 326.217 741.537C325.417 742.321 324.257 742.713 322.737 742.713H321.537C321.281 742.713 321.073 742.785 320.913 742.929C320.753 743.073 320.673 743.257 320.673 743.481C320.673 743.689 320.745 743.865 320.889 744.009C321.033 744.153 321.209 744.225 321.417 744.225H325.785C326.585 744.225 327.265 744.521 327.825 745.113C328.385 745.705 328.665 746.505 328.665 747.513C328.665 748.297 328.481 748.977 328.113 749.553C327.745 750.145 327.249 750.601 326.625 750.921C326.017 751.241 325.337 751.401 324.585 751.401H319.953ZM321.225 749.217H324.465C324.833 749.217 325.137 749.105 325.377 748.881C325.633 748.673 325.761 748.393 325.761 748.041C325.761 747.673 325.641 747.385 325.401 747.177C325.177 746.985 324.905 746.889 324.585 746.889H321.225C320.905 746.889 320.633 747.001 320.409 747.225C320.185 747.449 320.073 747.721 320.073 748.041C320.073 748.393 320.185 748.673 320.409 748.881C320.633 749.105 320.905 749.217 321.225 749.217ZM322.737 740.577C323.345 740.577 323.793 740.385 324.081 740.001C324.385 739.617 324.537 739.089 324.537 738.417C324.537 737.745 324.385 737.217 324.081 736.833C323.793 736.449 323.345 736.257 322.737 736.257C322.145 736.257 321.697 736.449 321.393 736.833C321.105 737.217 320.961 737.745 320.961 738.417C320.961 739.089 321.105 739.617 321.393 740.001C321.697 740.385 322.145 740.577 322.737 740.577Z" fill="black"/>\n      <path d="M334.929 747.033V734.409H337.329L337.617 735.969H337.761C338.081 735.473 338.505 735.041 339.033 734.673C339.561 734.305 340.201 734.121 340.953 734.121C341.929 734.121 342.729 734.425 343.353 735.033C343.993 735.641 344.313 736.689 344.313 738.177V747.033H341.433V738.969C341.433 738.153 341.281 737.577 340.977 737.241C340.689 736.905 340.289 736.737 339.777 736.737C339.217 736.737 338.745 736.985 338.361 737.481C337.993 737.961 337.809 738.553 337.809 739.257V747.033H334.929Z" fill="black"/>\n      <path d="M351.512 750.777L352.832 747.033H351.512V743.745H354.824V746.745L353.24 750.777H351.512Z" fill="black"/>\n      <path d="M372.274 751.185V734.409H374.674L374.962 735.969H375.082C375.402 735.361 375.81 734.905 376.306 734.601C376.802 734.281 377.346 734.121 377.938 734.121C379.186 734.121 380.17 734.657 380.89 735.729C381.626 736.785 381.994 738.457 381.994 740.745C381.994 742.265 381.818 743.513 381.466 744.489C381.13 745.465 380.666 746.185 380.074 746.649C379.498 747.097 378.834 747.321 378.082 747.321C377.442 747.321 376.866 747.185 376.354 746.913C375.858 746.625 375.498 746.233 375.274 745.737H375.154V751.185H372.274ZM377.074 744.705C377.778 744.705 378.274 744.401 378.562 743.793C378.85 743.185 378.994 742.313 378.994 741.177V740.265C378.994 739.129 378.85 738.257 378.562 737.649C378.274 737.041 377.778 736.737 377.074 736.737C376.386 736.737 375.89 737.041 375.586 737.649C375.298 738.257 375.154 739.129 375.154 740.265V741.129C375.154 742.265 375.298 743.145 375.586 743.769C375.89 744.393 376.386 744.705 377.074 744.705Z" fill="black"/>\n      <path d="M389.098 747.033V734.409H391.498L391.834 736.257H391.978C392.154 735.729 392.402 735.241 392.722 734.793C393.042 734.345 393.522 734.121 394.162 734.121C394.53 734.121 394.818 734.153 395.026 734.217C395.25 734.281 395.362 734.313 395.362 734.313V737.097H394.33C393.914 737.097 393.522 737.185 393.154 737.361C392.802 737.537 392.514 737.833 392.29 738.249C392.082 738.665 391.978 739.249 391.978 740.001V747.033H389.098Z" fill="black"/>\n      <path d="M406.266 747.321C404.586 747.321 403.322 746.793 402.474 745.737C401.642 744.665 401.226 742.993 401.226 740.721C401.226 738.449 401.642 736.785 402.474 735.729C403.322 734.657 404.586 734.121 406.266 734.121C407.946 734.121 409.202 734.657 410.034 735.729C410.882 736.785 411.306 738.449 411.306 740.721C411.306 742.993 410.882 744.665 410.034 745.737C409.202 746.793 407.946 747.321 406.266 747.321ZM406.266 744.897C407.018 744.897 407.546 744.585 407.85 743.961C408.154 743.321 408.306 742.393 408.306 741.177V740.265C408.306 739.049 408.154 738.129 407.85 737.505C407.546 736.865 407.018 736.545 406.266 736.545C405.53 736.545 405.002 736.865 404.682 737.505C404.378 738.129 404.226 739.049 404.226 740.265V741.177C404.226 742.393 404.378 743.321 404.682 743.961C405.002 744.585 405.53 744.897 406.266 744.897Z" fill="black"/>\n      <path d="M420.233 751.401C419.465 751.401 418.809 751.129 418.265 750.585C417.721 750.057 417.449 749.361 417.449 748.497C417.449 747.873 417.601 747.353 417.905 746.937C418.225 746.521 418.609 746.185 419.057 745.929C418.753 745.737 418.505 745.481 418.313 745.161C418.137 744.841 418.049 744.465 418.049 744.033C418.049 743.473 418.233 743.009 418.601 742.641C418.969 742.273 419.401 742.001 419.897 741.825C419.401 741.457 419.017 740.985 418.745 740.409C418.489 739.817 418.361 739.153 418.361 738.417C418.361 737.121 418.761 736.081 419.561 735.297C420.361 734.513 421.513 734.121 423.017 734.121C423.833 734.121 424.537 734.241 425.129 734.481C425.609 734.129 425.929 733.737 426.089 733.305C426.265 732.857 426.353 732.521 426.353 732.297H428.729C428.729 733.193 428.545 733.905 428.177 734.433C427.825 734.961 427.329 735.321 426.689 735.513C427.009 735.865 427.257 736.289 427.433 736.785C427.609 737.281 427.697 737.825 427.697 738.417C427.697 739.713 427.297 740.753 426.497 741.537C425.697 742.321 424.537 742.713 423.017 742.713H421.817C421.561 742.713 421.353 742.785 421.193 742.929C421.033 743.073 420.953 743.257 420.953 743.481C420.953 743.689 421.025 743.865 421.169 744.009C421.313 744.153 421.489 744.225 421.697 744.225H426.065C426.865 744.225 427.545 744.521 428.105 745.113C428.665 745.705 428.945 746.505 428.945 747.513C428.945 748.297 428.761 748.977 428.393 749.553C428.025 750.145 427.529 750.601 426.905 750.921C426.297 751.241 425.617 751.401 424.865 751.401H420.233ZM421.505 749.217H424.745C425.113 749.217 425.417 749.105 425.657 748.881C425.913 748.673 426.041 748.393 426.041 748.041C426.041 747.673 425.921 747.385 425.681 747.177C425.457 746.985 425.185 746.889 424.865 746.889H421.505C421.185 746.889 420.913 747.001 420.689 747.225C420.465 747.449 420.353 747.721 420.353 748.041C420.353 748.393 420.465 748.673 420.689 748.881C420.913 749.105 421.185 749.217 421.505 749.217ZM423.017 740.577C423.625 740.577 424.073 740.385 424.361 740.001C424.665 739.617 424.817 739.089 424.817 738.417C424.817 737.745 424.665 737.217 424.361 736.833C424.073 736.449 423.625 736.257 423.017 736.257C422.425 736.257 421.977 736.449 421.673 736.833C421.385 737.217 421.241 737.745 421.241 738.417C421.241 739.089 421.385 739.617 421.673 740.001C421.977 740.385 422.425 740.577 423.017 740.577Z" fill="black"/>\n      <path d="M435.209 747.033V734.409H437.609L437.945 736.257H438.089C438.265 735.729 438.513 735.241 438.833 734.793C439.153 734.345 439.633 734.121 440.273 734.121C440.641 734.121 440.929 734.153 441.137 734.217C441.361 734.281 441.473 734.313 441.473 734.313V737.097H440.441C440.025 737.097 439.633 737.185 439.265 737.361C438.913 737.537 438.625 737.833 438.401 738.249C438.193 738.665 438.089 739.249 438.089 740.001V747.033H435.209Z" fill="black"/>\n      <path d="M449.857 747.321C449.569 747.321 449.241 747.273 448.873 747.177C448.505 747.081 448.153 746.905 447.817 746.649C447.497 746.393 447.225 746.033 447.001 745.569C446.793 745.105 446.689 744.505 446.689 743.769C446.689 742.633 446.953 741.745 447.481 741.105C448.025 740.465 448.769 740.017 449.713 739.761C450.657 739.489 451.737 739.353 452.953 739.353V738.033C452.953 737.601 452.873 737.233 452.713 736.929C452.553 736.625 452.193 736.473 451.633 736.473C451.041 736.473 450.641 736.617 450.433 736.905C450.225 737.193 450.121 737.489 450.121 737.793V738.153H447.313C447.297 738.073 447.289 737.993 447.289 737.913C447.289 737.833 447.289 737.737 447.289 737.625C447.289 736.569 447.673 735.721 448.441 735.081C449.225 734.441 450.265 734.121 451.561 734.121C453.033 734.121 454.113 734.449 454.801 735.105C455.505 735.745 455.857 736.657 455.857 737.841V744.057C455.857 744.361 455.929 744.577 456.073 744.705C456.217 744.833 456.369 744.897 456.529 744.897H457.105V746.937C456.945 747.017 456.729 747.097 456.457 747.177C456.185 747.273 455.833 747.321 455.401 747.321C454.825 747.321 454.345 747.169 453.961 746.865C453.577 746.561 453.313 746.161 453.169 745.665H453.049C452.697 746.161 452.289 746.561 451.825 746.865C451.361 747.169 450.705 747.321 449.857 747.321ZM451.057 744.921C451.521 744.921 451.889 744.793 452.161 744.537C452.433 744.281 452.633 743.945 452.761 743.529C452.889 743.113 452.953 742.657 452.953 742.161V741.441C452.393 741.441 451.857 741.505 451.345 741.633C450.849 741.745 450.441 741.953 450.121 742.257C449.801 742.545 449.641 742.961 449.641 743.505C449.641 743.937 449.753 744.281 449.977 744.537C450.201 744.793 450.561 744.921 451.057 744.921Z" fill="black"/>\n      <path d="M463.418 747.033V734.409H465.818L466.106 735.969H466.25C466.554 735.473 466.954 735.041 467.45 734.673C467.962 734.305 468.562 734.121 469.25 734.121C469.874 734.121 470.418 734.265 470.882 734.553C471.346 734.841 471.706 735.313 471.962 735.969C472.282 735.473 472.714 735.041 473.258 734.673C473.818 734.305 474.474 734.121 475.226 734.121C475.834 734.121 476.37 734.249 476.834 734.505C477.298 734.761 477.666 735.185 477.938 735.777C478.21 736.353 478.346 737.153 478.346 738.177V747.033H475.466V738.969C475.466 738.153 475.346 737.577 475.106 737.241C474.882 736.905 474.53 736.737 474.05 736.737C473.586 736.737 473.178 736.953 472.826 737.385C472.474 737.801 472.298 738.361 472.298 739.065V747.033H469.466V738.969C469.466 738.153 469.346 737.577 469.106 737.241C468.866 736.905 468.506 736.737 468.026 736.737C467.53 736.737 467.114 736.969 466.778 737.433C466.458 737.897 466.298 738.505 466.298 739.257V747.033H463.418Z" fill="black"/>\n      <path d="M485.702 747.033V734.409H488.102L488.39 735.969H488.534C488.838 735.473 489.238 735.041 489.734 734.673C490.246 734.305 490.846 734.121 491.534 734.121C492.158 734.121 492.702 734.265 493.166 734.553C493.63 734.841 493.99 735.313 494.246 735.969C494.566 735.473 494.998 735.041 495.542 734.673C496.102 734.305 496.758 734.121 497.51 734.121C498.118 734.121 498.654 734.249 499.118 734.505C499.582 734.761 499.95 735.185 500.222 735.777C500.494 736.353 500.63 737.153 500.63 738.177V747.033H497.75V738.969C497.75 738.153 497.63 737.577 497.39 737.241C497.166 736.905 496.814 736.737 496.334 736.737C495.87 736.737 495.462 736.953 495.11 737.385C494.758 737.801 494.582 738.361 494.582 739.065V747.033H491.75V738.969C491.75 738.153 491.63 737.577 491.39 737.241C491.15 736.905 490.79 736.737 490.31 736.737C489.814 736.737 489.398 736.969 489.062 737.433C488.742 737.897 488.582 738.505 488.582 739.257V747.033H485.702Z" fill="black"/>\n      <path d="M507.963 747.033V734.409H510.843V747.033H507.963ZM507.939 732.441V729.681H510.843V732.441H507.939Z" fill="black"/>\n      <path d="M518.248 747.033V734.409H520.648L520.936 735.969H521.08C521.4 735.473 521.824 735.041 522.352 734.673C522.88 734.305 523.52 734.121 524.272 734.121C525.248 734.121 526.048 734.425 526.672 735.033C527.312 735.641 527.632 736.689 527.632 738.177V747.033H524.752V738.969C524.752 738.153 524.6 737.577 524.296 737.241C524.008 736.905 523.608 736.737 523.096 736.737C522.536 736.737 522.064 736.985 521.68 737.481C521.312 737.961 521.128 738.553 521.128 739.257V747.033H518.248Z" fill="black"/>\n      <path d="M536.919 751.401C536.151 751.401 535.495 751.129 534.951 750.585C534.407 750.057 534.135 749.361 534.135 748.497C534.135 747.873 534.287 747.353 534.591 746.937C534.911 746.521 535.295 746.185 535.743 745.929C535.439 745.737 535.191 745.481 534.999 745.161C534.823 744.841 534.735 744.465 534.735 744.033C534.735 743.473 534.919 743.009 535.287 742.641C535.655 742.273 536.087 742.001 536.583 741.825C536.087 741.457 535.703 740.985 535.431 740.409C535.175 739.817 535.047 739.153 535.047 738.417C535.047 737.121 535.447 736.081 536.247 735.297C537.047 734.513 538.199 734.121 539.703 734.121C540.519 734.121 541.223 734.241 541.815 734.481C542.295 734.129 542.615 733.737 542.775 733.305C542.951 732.857 543.039 732.521 543.039 732.297H545.415C545.415 733.193 545.231 733.905 544.863 734.433C544.511 734.961 544.015 735.321 543.375 735.513C543.695 735.865 543.943 736.289 544.119 736.785C544.295 737.281 544.383 737.825 544.383 738.417C544.383 739.713 543.983 740.753 543.183 741.537C542.383 742.321 541.223 742.713 539.703 742.713H538.503C538.247 742.713 538.039 742.785 537.879 742.929C537.719 743.073 537.639 743.257 537.639 743.481C537.639 743.689 537.711 743.865 537.855 744.009C537.999 744.153 538.175 744.225 538.383 744.225H542.751C543.551 744.225 544.231 744.521 544.791 745.113C545.351 745.705 545.631 746.505 545.631 747.513C545.631 748.297 545.447 748.977 545.079 749.553C544.711 750.145 544.215 750.601 543.591 750.921C542.983 751.241 542.303 751.401 541.551 751.401H536.919ZM538.191 749.217H541.431C541.799 749.217 542.103 749.105 542.343 748.881C542.599 748.673 542.727 748.393 542.727 748.041C542.727 747.673 542.607 747.385 542.367 747.177C542.143 746.985 541.871 746.889 541.551 746.889H538.191C537.871 746.889 537.599 747.001 537.375 747.225C537.151 747.449 537.039 747.721 537.039 748.041C537.039 748.393 537.151 748.673 537.375 748.881C537.599 749.105 537.871 749.217 538.191 749.217ZM539.703 740.577C540.311 740.577 540.759 740.385 541.047 740.001C541.351 739.617 541.503 739.089 541.503 738.417C541.503 737.745 541.351 737.217 541.047 736.833C540.759 736.449 540.311 736.257 539.703 736.257C539.111 736.257 538.663 736.449 538.359 736.833C538.071 737.217 537.927 737.745 537.927 738.417C537.927 739.089 538.071 739.617 538.359 740.001C538.663 740.385 539.111 740.577 539.703 740.577Z" fill="black"/>\n      <path d="M551.654 750.777L552.974 747.033H551.654V743.745H554.966V746.745L553.382 750.777H551.654Z" fill="black"/>\n      <path d="M576.472 747.321C575.512 747.321 574.688 747.153 574 746.817C573.312 746.481 572.784 746.017 572.416 745.425C572.064 744.817 571.888 744.113 571.888 743.313C571.888 743.249 571.888 743.185 571.888 743.121C571.904 743.057 571.912 743.025 571.912 743.025H574.84V743.193C574.856 743.865 575.048 744.329 575.416 744.585C575.784 744.841 576.168 744.969 576.568 744.969C576.952 744.969 577.328 744.873 577.696 744.681C578.064 744.473 578.248 744.113 578.248 743.601C578.248 743.153 578.096 742.817 577.792 742.593C577.504 742.353 577.12 742.169 576.64 742.041C576.176 741.897 575.68 741.753 575.152 741.609C574.64 741.465 574.144 741.265 573.664 741.009C573.2 740.737 572.816 740.369 572.512 739.905C572.224 739.425 572.08 738.777 572.08 737.961C572.08 737.097 572.28 736.385 572.68 735.825C573.08 735.249 573.624 734.825 574.312 734.553C575 734.265 575.76 734.121 576.592 734.121C577.392 734.121 578.112 734.257 578.752 734.529C579.408 734.801 579.92 735.193 580.288 735.705C580.672 736.217 580.864 736.833 580.864 737.553C580.864 737.681 580.856 737.801 580.84 737.913C580.84 738.025 580.84 738.089 580.84 738.105H577.912V738.057C577.896 737.497 577.76 737.097 577.504 736.857C577.264 736.601 576.928 736.473 576.496 736.473C576.208 736.473 575.952 736.529 575.728 736.641C575.504 736.737 575.328 736.881 575.2 737.073C575.072 737.249 575.008 737.465 575.008 737.721C575.008 738.121 575.152 738.425 575.44 738.633C575.744 738.841 576.128 739.009 576.592 739.137C577.072 739.265 577.568 739.401 578.08 739.545C578.608 739.673 579.104 739.873 579.568 740.145C580.048 740.401 580.432 740.777 580.72 741.273C581.024 741.753 581.176 742.409 581.176 743.241C581.176 744.265 580.968 745.073 580.552 745.665C580.152 746.257 579.592 746.681 578.872 746.937C578.168 747.193 577.368 747.321 576.472 747.321Z" fill="black"/>\n      <path d="M592.53 747.321C590.914 747.321 589.682 746.793 588.834 745.737C588.002 744.665 587.586 742.993 587.586 740.721C587.586 738.449 588.002 736.785 588.834 735.729C589.682 734.657 590.882 734.121 592.434 734.121C593.954 734.121 595.09 734.657 595.842 735.729C596.61 736.785 596.994 738.449 596.994 740.721V741.441H590.586C590.602 742.561 590.754 743.433 591.042 744.057C591.33 744.665 591.826 744.969 592.53 744.969C593.026 744.969 593.418 744.761 593.706 744.345C593.994 743.913 594.138 743.321 594.138 742.569H596.994C596.994 744.185 596.57 745.385 595.722 746.169C594.874 746.937 593.81 747.321 592.53 747.321ZM590.61 739.353H593.97C593.97 738.441 593.842 737.737 593.586 737.241C593.346 736.729 592.962 736.473 592.434 736.473C591.826 736.473 591.378 736.729 591.09 737.241C590.818 737.737 590.658 738.441 590.61 739.353Z" fill="black"/>\n      <path d="M608.275 747.321C606.659 747.321 605.427 746.793 604.579 745.737C603.747 744.665 603.331 742.993 603.331 740.721C603.331 738.449 603.747 736.785 604.579 735.729C605.427 734.657 606.627 734.121 608.179 734.121C609.699 734.121 610.835 734.657 611.587 735.729C612.355 736.785 612.739 738.449 612.739 740.721V741.441H606.331C606.347 742.561 606.499 743.433 606.787 744.057C607.075 744.665 607.571 744.969 608.275 744.969C608.771 744.969 609.163 744.761 609.451 744.345C609.739 743.913 609.883 743.321 609.883 742.569H612.739C612.739 744.185 612.315 745.385 611.467 746.169C610.619 746.937 609.555 747.321 608.275 747.321ZM606.355 739.353H609.715C609.715 738.441 609.587 737.737 609.331 737.241C609.091 736.729 608.707 736.473 608.179 736.473C607.571 736.473 607.123 736.729 606.835 737.241C606.563 737.737 606.403 738.441 606.355 739.353Z" fill="black"/>\n      <path d="M619.628 747.033V729.681H622.508V739.425L626.036 734.409H629.108L625.364 739.545L629.3 747.033H626.108L623.564 741.801L622.508 743.097V747.033H619.628Z" fill="black"/>\n      <path d="M635.374 747.033V734.409H638.254V747.033H635.374ZM635.35 732.441V729.681H638.254V732.441H635.35Z" fill="black"/>\n      <path d="M645.659 747.033V734.409H648.059L648.347 735.969H648.491C648.811 735.473 649.235 735.041 649.763 734.673C650.291 734.305 650.931 734.121 651.683 734.121C652.659 734.121 653.459 734.425 654.083 735.033C654.723 735.641 655.043 736.689 655.043 738.177V747.033H652.163V738.969C652.163 738.153 652.011 737.577 651.707 737.241C651.419 736.905 651.019 736.737 650.507 736.737C649.947 736.737 649.475 736.985 649.091 737.481C648.723 737.961 648.539 738.553 648.539 739.257V747.033H645.659Z" fill="black"/>\n      <path d="M664.33 751.401C663.562 751.401 662.906 751.129 662.362 750.585C661.818 750.057 661.546 749.361 661.546 748.497C661.546 747.873 661.698 747.353 662.002 746.937C662.322 746.521 662.706 746.185 663.154 745.929C662.85 745.737 662.602 745.481 662.41 745.161C662.234 744.841 662.146 744.465 662.146 744.033C662.146 743.473 662.33 743.009 662.698 742.641C663.066 742.273 663.498 742.001 663.994 741.825C663.498 741.457 663.114 740.985 662.842 740.409C662.586 739.817 662.458 739.153 662.458 738.417C662.458 737.121 662.858 736.081 663.658 735.297C664.458 734.513 665.61 734.121 667.114 734.121C667.93 734.121 668.634 734.241 669.226 734.481C669.706 734.129 670.026 733.737 670.186 733.305C670.362 732.857 670.45 732.521 670.45 732.297H672.826C672.826 733.193 672.642 733.905 672.274 734.433C671.922 734.961 671.426 735.321 670.786 735.513C671.106 735.865 671.354 736.289 671.53 736.785C671.706 737.281 671.794 737.825 671.794 738.417C671.794 739.713 671.394 740.753 670.594 741.537C669.794 742.321 668.634 742.713 667.114 742.713H665.914C665.658 742.713 665.45 742.785 665.29 742.929C665.13 743.073 665.05 743.257 665.05 743.481C665.05 743.689 665.122 743.865 665.266 744.009C665.41 744.153 665.586 744.225 665.794 744.225H670.162C670.962 744.225 671.642 744.521 672.202 745.113C672.762 745.705 673.042 746.505 673.042 747.513C673.042 748.297 672.858 748.977 672.49 749.553C672.122 750.145 671.626 750.601 671.002 750.921C670.394 751.241 669.714 751.401 668.962 751.401H664.33ZM665.602 749.217H668.842C669.21 749.217 669.514 749.105 669.754 748.881C670.01 748.673 670.138 748.393 670.138 748.041C670.138 747.673 670.018 747.385 669.778 747.177C669.554 746.985 669.282 746.889 668.962 746.889H665.602C665.282 746.889 665.01 747.001 664.786 747.225C664.562 747.449 664.45 747.721 664.45 748.041C664.45 748.393 664.562 748.673 664.786 748.881C665.01 749.105 665.282 749.217 665.602 749.217ZM667.114 740.577C667.722 740.577 668.17 740.385 668.458 740.001C668.762 739.617 668.914 739.089 668.914 738.417C668.914 737.745 668.762 737.217 668.458 736.833C668.17 736.449 667.722 736.257 667.114 736.257C666.522 736.257 666.074 736.449 665.77 736.833C665.482 737.217 665.338 737.745 665.338 738.417C665.338 739.089 665.482 739.617 665.77 740.001C666.074 740.385 666.522 740.577 667.114 740.577Z" fill="black"/>\n      <path d="M691.414 751.401C690.646 751.401 689.99 751.129 689.446 750.585C688.902 750.057 688.63 749.361 688.63 748.497C688.63 747.873 688.782 747.353 689.086 746.937C689.406 746.521 689.79 746.185 690.238 745.929C689.934 745.737 689.686 745.481 689.494 745.161C689.318 744.841 689.23 744.465 689.23 744.033C689.23 743.473 689.414 743.009 689.782 742.641C690.15 742.273 690.582 742.001 691.078 741.825C690.582 741.457 690.198 740.985 689.926 740.409C689.67 739.817 689.542 739.153 689.542 738.417C689.542 737.121 689.942 736.081 690.742 735.297C691.542 734.513 692.694 734.121 694.198 734.121C695.014 734.121 695.718 734.241 696.31 734.481C696.79 734.129 697.11 733.737 697.27 733.305C697.446 732.857 697.534 732.521 697.534 732.297H699.91C699.91 733.193 699.726 733.905 699.358 734.433C699.006 734.961 698.51 735.321 697.87 735.513C698.19 735.865 698.438 736.289 698.614 736.785C698.79 737.281 698.878 737.825 698.878 738.417C698.878 739.713 698.478 740.753 697.678 741.537C696.878 742.321 695.718 742.713 694.198 742.713H692.998C692.742 742.713 692.534 742.785 692.374 742.929C692.214 743.073 692.134 743.257 692.134 743.481C692.134 743.689 692.206 743.865 692.35 744.009C692.494 744.153 692.67 744.225 692.878 744.225H697.246C698.046 744.225 698.726 744.521 699.286 745.113C699.846 745.705 700.126 746.505 700.126 747.513C700.126 748.297 699.942 748.977 699.574 749.553C699.206 750.145 698.71 750.601 698.086 750.921C697.478 751.241 696.798 751.401 696.046 751.401H691.414ZM692.686 749.217H695.926C696.294 749.217 696.598 749.105 696.838 748.881C697.094 748.673 697.222 748.393 697.222 748.041C697.222 747.673 697.102 747.385 696.862 747.177C696.638 746.985 696.366 746.889 696.046 746.889H692.686C692.366 746.889 692.094 747.001 691.87 747.225C691.646 747.449 691.534 747.721 691.534 748.041C691.534 748.393 691.646 748.673 691.87 748.881C692.094 749.105 692.366 749.217 692.686 749.217ZM694.198 740.577C694.806 740.577 695.254 740.385 695.542 740.001C695.846 739.617 695.998 739.089 695.998 738.417C695.998 737.745 695.846 737.217 695.542 736.833C695.254 736.449 694.806 736.257 694.198 736.257C693.606 736.257 693.158 736.449 692.854 736.833C692.566 737.217 692.422 737.745 692.422 738.417C692.422 739.089 692.566 739.617 692.854 740.001C693.158 740.385 693.606 740.577 694.198 740.577Z" fill="black"/>\n      <path d="M706.39 747.033V734.409H708.79L709.126 736.257H709.27C709.446 735.729 709.694 735.241 710.014 734.793C710.334 734.345 710.814 734.121 711.454 734.121C711.822 734.121 712.11 734.153 712.318 734.217C712.542 734.281 712.654 734.313 712.654 734.313V737.097H711.622C711.206 737.097 710.814 737.185 710.446 737.361C710.094 737.537 709.806 737.833 709.582 738.249C709.374 738.665 709.27 739.249 709.27 740.001V747.033H706.39Z" fill="black"/>\n      <path d="M721.038 747.321C720.75 747.321 720.422 747.273 720.054 747.177C719.686 747.081 719.334 746.905 718.998 746.649C718.678 746.393 718.406 746.033 718.182 745.569C717.974 745.105 717.87 744.505 717.87 743.769C717.87 742.633 718.134 741.745 718.662 741.105C719.206 740.465 719.95 740.017 720.894 739.761C721.838 739.489 722.918 739.353 724.134 739.353V738.033C724.134 737.601 724.054 737.233 723.894 736.929C723.734 736.625 723.374 736.473 722.814 736.473C722.222 736.473 721.822 736.617 721.614 736.905C721.406 737.193 721.302 737.489 721.302 737.793V738.153H718.494C718.478 738.073 718.47 737.993 718.47 737.913C718.47 737.833 718.47 737.737 718.47 737.625C718.47 736.569 718.854 735.721 719.622 735.081C720.406 734.441 721.446 734.121 722.742 734.121C724.214 734.121 725.294 734.449 725.982 735.105C726.686 735.745 727.038 736.657 727.038 737.841V744.057C727.038 744.361 727.11 744.577 727.254 744.705C727.398 744.833 727.55 744.897 727.71 744.897H728.286V746.937C728.126 747.017 727.91 747.097 727.638 747.177C727.366 747.273 727.014 747.321 726.582 747.321C726.006 747.321 725.526 747.169 725.142 746.865C724.758 746.561 724.494 746.161 724.35 745.665H724.23C723.878 746.161 723.47 746.561 723.006 746.865C722.542 747.169 721.886 747.321 721.038 747.321ZM722.238 744.921C722.702 744.921 723.07 744.793 723.342 744.537C723.614 744.281 723.814 743.945 723.942 743.529C724.07 743.113 724.134 742.657 724.134 742.161V741.441C723.574 741.441 723.038 741.505 722.526 741.633C722.03 741.745 721.622 741.953 721.302 742.257C720.982 742.545 720.822 742.961 720.822 743.505C720.822 743.937 720.934 744.281 721.158 744.537C721.382 744.793 721.742 744.921 722.238 744.921Z" fill="black"/>\n      <path d="M739.039 747.321C737.391 747.321 736.183 746.793 735.415 745.737C734.647 744.665 734.263 742.993 734.263 740.721C734.263 738.449 734.655 736.785 735.439 735.729C736.223 734.657 737.391 734.121 738.943 734.121C740.287 734.121 741.359 734.521 742.159 735.321C742.959 736.121 743.359 737.401 743.359 739.161H740.407C740.407 738.265 740.287 737.609 740.047 737.193C739.807 736.761 739.439 736.545 738.943 736.545C738.335 736.545 737.903 736.865 737.647 737.505C737.391 738.129 737.263 739.049 737.263 740.265V741.177C737.263 742.393 737.399 743.321 737.671 743.961C737.943 744.585 738.399 744.897 739.039 744.897C739.551 744.897 739.919 744.681 740.143 744.249C740.383 743.801 740.503 743.145 740.503 742.281H743.359C743.359 743.449 743.183 744.409 742.831 745.161C742.479 745.897 741.975 746.441 741.319 746.793C740.679 747.145 739.919 747.321 739.039 747.321Z" fill="black"/>\n      <path d="M754.712 747.321C753.096 747.321 751.864 746.793 751.016 745.737C750.184 744.665 749.768 742.993 749.768 740.721C749.768 738.449 750.184 736.785 751.016 735.729C751.864 734.657 753.064 734.121 754.616 734.121C756.136 734.121 757.272 734.657 758.024 735.729C758.792 736.785 759.176 738.449 759.176 740.721V741.441H752.768C752.784 742.561 752.936 743.433 753.224 744.057C753.512 744.665 754.008 744.969 754.712 744.969C755.208 744.969 755.6 744.761 755.888 744.345C756.176 743.913 756.32 743.321 756.32 742.569H759.176C759.176 744.185 758.752 745.385 757.904 746.169C757.056 746.937 755.992 747.321 754.712 747.321ZM752.792 739.353H756.152C756.152 738.441 756.024 737.737 755.768 737.241C755.528 736.729 755.144 736.473 754.616 736.473C754.008 736.473 753.56 736.729 753.272 737.241C753 737.737 752.84 738.441 752.792 739.353Z" fill="black"/>\n    </g>\n    <line id="l1" x1="507.5" y1="218" x2="507.5" y2="89" stroke="black"/>\n    <line id="l2" x1="507.5" y1="930" x2="507.5" y2="801" stroke="black"/>\n  </g>\n</svg>\n'),n=e.xml,t=n.width.baseVal.value,a=n.height.baseVal.value,C=10/Math.max(t,a),i=e.paths.flatMap(e=>e.toShapes(!0)).map(e=>new l.MSw(e));!function(e){if(e.index){let n=e.index.array;for(let e=0,t=n.length;e<t;e+=3){let t=n[e+0],a=n[e+1];n[e+0]=a,n[e+1]=t}e.index.needsUpdate=!0}else{let n=e.attributes.position.count;for(let t of Object.values(e.attributes)){let{array:e,itemSize:a}=t;switch(t.needsUpdate=!0,a){case 3:{let t=new l.Pq0,C=new l.Pq0;for(let i=0;i<n;i+=3)t.fromArray(e,(i+0)*a),C.fromArray(e,(i+1)*a),t.toArray(e,(i+1)*a),C.toArray(e,(i+0)*a);break}case 2:{let t=new l.I9Y,C=new l.I9Y;for(let i=0;i<n;i+=3)t.fromArray(e,(i+0)*a),C.fromArray(e,(i+1)*a),t.toArray(e,(i+1)*a),C.toArray(e,(i+0)*a)}}}}if(e.attributes.normal){let n=e.attributes.normal;for(let e=0;e<n.count;e++)n.setXYZ(e,-n.getX(e),-n.getY(e),-n.getZ(e));n.needsUpdate=!0}}(c.pP(i,!1).translate(-t/2,-a/2,0).scale(C,-C,1)),this.imageFill=function(e,n){for(let n of(e=e.cloneNode(!0)).querySelectorAll("line"))n.remove();for(let n of e.querySelectorAll("#visual *"))n.setAttribute("stroke","none"),n.setAttribute("fill","#f00");for(let n of e.querySelectorAll("#tech *"))n.setAttribute("stroke","none"),n.setAttribute("fill","#0f0");for(let n of e.querySelectorAll("#baseline *"))n.remove();return g(e.outerHTML,4096,4096)}(n,4096),this.imageStroke=function(e,n){for(let n of(e=e.cloneNode(!0)).querySelectorAll("line, path"))n.setAttribute("stroke","#fff"),n.setAttribute("fill","none"),n.setAttribute("stroke-width","0.5");for(let n of e.querySelectorAll("#baseline *"))n.setAttribute("stroke","none"),n.setAttribute("fill","#fff");return g(e.outerHTML,4096,4096)}(n,4096)}}function z(){let e=(0,C.Fw)();return(0,C.dB)("my-scene",function*(n){e.pipeline.basicPasses.fxaa.enabled=!1,(0,i.mj)(new o.u,n),(0,i.mj)(new V().initialize(e),n)},[]),null}function M(){return(0,a.jsxs)(C.uB,{vertigoControls:{fixed:!0,size:10,eventTarget:"canvas"},children:[(0,a.jsx)("div",{className:"ClientPage layer thru flex flex-col p-8",children:(0,a.jsx)("div",{children:"Joseph M."})}),(0,a.jsx)(z,{})]})}},55227:(e,n,t)=>{t.d(n,{M:()=>o});var a=t(22899),C=t(1029);let i="\n\nstruct FloatRamp {\n  float a;\n  float b;\n  float t;\n};\n\nstruct Vec2Ramp {\n  vec2 a;\n  vec2 b;\n  float t;\n};\n\nstruct Vec3Ramp {\n  vec3 a;\n  vec3 b;\n  float t;\n};\n\nstruct Vec4Ramp {\n  vec4 a;\n  vec4 b;\n  float t;\n};\n\n".concat((0,C.N)("vecX",e=>{let n=e[0].toUpperCase()+e.slice(1)+"Ramp";return"\n\n// 1 stop (simple linear interpolation)\n".concat(n," ramp(float t, T a, T b) {\n  return ").concat(n,"(a, b, t);\n}\n\n// 2 stops\n").concat(n," ramp(float t, T a, T b, T c) {\n  if (t < 0.5) {\n    return ").concat(n,"(a, b, t * 2.0);\n  } else {\n    return ").concat(n,"(b, c, t * 2.0 - 1.0);\n  }\n}\n\n// 4 stops\n").concat(n," ramp(float t, T a, T b, T c, T d) {\n  if (t < 0.333) {\n    return ").concat(n,"(a, b, t * 3.0);\n  } else if (t < 0.666) {\n    return ").concat(n,"(b, c, t * 3.0 - 1.0);\n  } else {\n    return ").concat(n,"(c, d, t * 3.0 - 2.0);\n  }\n}\n\n// 5 stops\n").concat(n," ramp(float t, T a, T b, T c, T d, T e) {\n  if (t < 0.25) {\n    return ").concat(n,"(a, b, t * 4.0);\n  } else if (t < 0.5) {\n    return ").concat(n,"(b, c, t * 4.0 - 1.0);\n  } else if (t < 0.75) {\n    return ").concat(n,"(c, d, t * 4.0 - 2.0);\n  } else {\n    return ").concat(n,"(d, e, t * 4.0 - 3.0);\n  }\n}\n\n").slice(1,-1)})),o="\n#ifndef GLSL_RAMP\n#define GLSL_RAMP\n".concat(a.I,"\n").concat(i,"\n#endif\n")},61572:(e,n,t)=>{t.d(n,{S:()=>o});var a=t(49797),C=t(59813);let i={...C.q.defaultParams,size:512,viscosity:.98,cellScale:1};class o extends C.q{pointer(e,n,t,a){let{uPointer:C}=this.updateUniforms;C.value.set(e,n,t,a)}constructor(e){super({filter:"linear",...e}),this.shaders({initial:{fragmentColor:"\n          gl_FragColor.rgb = vec3(0.0);\n          gl_FragColor.a = 1.0;\n        "},update:{uniforms:{uViscosity:{value:this.params.viscosity},uCellScale:{value:this.params.cellScale},uPointer:{value:new a.IUQ(.5,.5,.1,1)}},fragmentTop:"\n          vec4 fetch(vec2 uv) {\n            if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n              return vec4(0.0);\n            }\n            float margin = 0.2;\n            float edgeDist = min(min(uv.x, 1.0 - uv.x), min(uv.y, 1.0 - uv.y));\n            edgeDist = 1.0 - pow(1.0 - edgeDist, 15.0);\n            float edgeFade = smoothstep(0.0, margin, edgeDist);\n            return texture2D(uTexture, uv) * edgeFade;\n          }\n        ",fragmentColor:"\n          vec2 uv = vUv;\n          float viscosity = uViscosity;\n          vec2 cellSize = uCellScale / uTextureSize;\n\n          vec4 center = fetch(uv);\n          vec4 north = fetch(uv + vec2(0.0, cellSize.y));\n          vec4 south = fetch(uv - vec2(0.0, cellSize.y));\n          vec4 east = fetch(uv + vec2(cellSize.x, 0.0));\n          vec4 west = fetch(uv - vec2(cellSize.x, 0.0));\n\n          // x: previous height\n          // y: penultimate height\n          // z: unused\n          // w: unused\n\n          float newHeight = ((north.x + south.x + east.x + west.x) * 0.5 - center.y) * viscosity;\n\n          // Pointer influence\n          float radius = uPointer.z;\n          float strength = uPointer.w;\n          float dist = distance(uv * uTextureSize, uPointer.xy * uTextureSize) - radius;\n          float cellLength = length(cellSize);\n          float influence = smoothstep(cellLength * 0.5, -cellLength * 0.5, dist);\n          newHeight += influence * strength;\n\n          gl_FragColor = vec4(newHeight, center.x, 0.0, 1.0);\n        "}})}}o.defaultParams=i},77515:(e,n,t)=>{t.d(n,{e:()=>y});var a=t(28535),C=t(76999),i=t(57368),o=t(49797),l=t(5832),r=t(33589),c=new WeakMap;class s extends o.Nv2{dispose(){!(0,a._)(this,c)&&(super.dispose(),(0,i._)(this,c,!0),this.video&&(this.video.pause(),this.video.src="",this.video.parentNode&&this.video.parentNode.removeChild(this.video),this.video=null))}static fromUrl(e){let{loop:n=!0,autoplay:t=!0,muted:a=!0}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},C=document.createElement("video");return C.src=e,C.loop=n,C.autoplay=t,C.muted=a,C.playsInline=!0,C.crossOrigin="anonymous",C.play(),new s(C)}constructor(e){super(e),(0,C._)(this,c,{writable:!0,value:void 0}),this.video=e,(0,i._)(this,c,!1)}}let x={video:["mp4","webm"],srgb:["jpg","jpeg","png","webp"],linear:["hdr","exr"]},u=e=>x.srgb.includes(e),v=e=>x.linear.includes(e),f=e=>x.video.includes(e),p=e=>u(e)||v(e);var d=new WeakMap,m=new WeakMap;class h{loadTexture(e,n){var t,C,c;let x,u,p=new URL(e,window.location.href).pathname.split("/").pop()||"unknown",h=null==(t=p.match(/[^.]+$/))?void 0:t[0];if(void 0===h)throw Error("No extension found in url: ".concat(e));if(f(h)){let n=(0,r.F)(s.fromUrl(e));return n.video.onloadedmetadata=()=>{n.image.width=n.video.videoWidth,n.image.height=n.video.videoHeight,n.resolve()},n.name=p,n}let y=(v(h)?(0,i._)(this,m,null!=(C=(0,a._)(this,m))?C:new l.Y):(0,i._)(this,d,null!=(c=(0,a._)(this,d))?c:new o.Tap)).load(e,e=>{var t;e.name=p,e.colorSpace=null!=(t=null==n?void 0:n.colorSpace)?t:v(h)?o.Zr2:o.er$,w(),x(e)},void 0,()=>{w();let n=Error("Cannot load texture (NOT FOUND?): ".concat(e));u(n)}),H=new Promise((e,n)=>{x=e,u=n});Object.assign(y,{then:H.then.bind(H),catch:H.catch.bind(H),finally:H.finally.bind(H)});let w=()=>{delete y.then,delete y.catch,delete y.finally};return y}load(e){var n;let t=null==(n=e.match(/[^.]+$/))?void 0:n[0];if(void 0===t)throw Error("No extension found in url: ".concat(e));if(p(t))return this.loadTexture(e);throw Error("Unsupported extension: ".concat(e))}constructor(){(0,C._)(this,d,{writable:!0,value:void 0}),(0,C._)(this,m,{writable:!0,value:void 0}),(0,i._)(this,d,null),(0,i._)(this,m,null)}}let y=new h}}]);