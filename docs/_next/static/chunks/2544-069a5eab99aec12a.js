"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2544],{42544:function(t,e,n){n.d(e,{m:function(){return v}});var a,r,i=n(88780),o=n(23247),l=n(85705),s=n(47090);function d(){return[...new Set(["�",..."abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",..."\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",..."0123456789",..." .,!?\xbf:;-+*/=%&|()[]{}<>$'’\""])].join("")}class c{constructor(){let t=d(),e=new i.Vector2(16,24),n=e.x/e.y,a=function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new i.Vector2;return n.x=Math.ceil(Math.sqrt(t/e)),n.y=Math.ceil(t/n.x),n}(t.length,n),r=e.clone().multiplyScalar(3),o=(0,s.h3)(r.x*a.x),l=(0,s.h3)(r.y*a.y),c=o/(r.x*a.x),u=l/(r.y*a.y),h=document.createElement("canvas");h.width=o,h.height=l;let x=h.getContext("2d");x.font="".concat(.8*r.y,"px monospace"),x.textBaseline="top",x.fillStyle="black",x.fillRect(0,0,o,l),x.fillStyle="white",x.transform(c,0,0,u,0,0);for(let e=0;e<t.length;e++){let n=Math.floor(e/a.x),i=(e-n*a.x+.12)*r.x,o=r.y*(n+.19999999999999996);x.fillText(t[e],i,o)}this.canvas=h,this.texture=new i.CanvasTexture(h),this.symbols=t,this.charGrid=a}}c.getDefaultSymbols=d;class u{get textCount(){return this.metadata.textCount}get lineCount(){return this.metadata.lineCount}get lineLength(){return this.metadata.lineLength}get strideHeaderByteSize(){return this.metadata.strideHeaderByteSize}get strideByteSize(){return this.metadata.strideByteSize}get textureSize(){return new i.Vector2(this.metadata.textureWidth,this.metadata.textureHeight)}encode(){let t=JSON.stringify(this.metadata),e=new TextEncoder().encode(t),n=e.length,a=new Uint8Array(4);new DataView(a.buffer).setUint32(0,n,!0);let r=new Uint8Array(4+n+this.array.length);return r.set(a,0),r.set(e,4),r.set(this.array,4+n),r}static decode(t){let e=new DataView(t.buffer).getUint32(0,!0),n=t.slice(4,4+e),a=JSON.parse(new TextDecoder().decode(n)),r=new u(a.symbols,a.textCount,a.lineCount,a.lineLength),i=t.slice(4+e);return r.array.set(i),r}info(){return"data: ".concat(this.array.length," bytes, ").concat(this.textureSize.x,"x").concat(this.textureSize.y)}getTextAt(t){let{array:e}=this,{symbols:n,lineLength:a,strideByteSize:r,strideHeaderByteSize:i}=this.metadata,o=t*r,l=e[o+0],s=e[o+16],d=t=>t.toString(16).padStart(2,"0"),c="#".concat(d(e[o+4])).concat(d(e[o+4+1])).concat(d(e[o+4+2])),u=e[o+4+3],h="#".concat(d(e[o+8])).concat(d(e[o+8+1])).concat(d(e[o+8+2])),x=e[o+8+3],v=[];for(let t=0;t<l;t++){let r=o+i+t*a,l=[];for(let t=0;t<s;t++){let a=n[e[r+t]];l.push(a)}v.push(l.join(""))}return{text:v.join("\n"),textColor:c,textOpacity:u,backgroundColor:h,backgroundOpacity:x,currentLineCount:l,currentLineLength:s}}setSizeAt(t,e){let{array:n}=this,{strideByteSize:a}=this.metadata;return new DataView(n.buffer).setFloat32(t*a+12,e),this}setColorAt(t,e){let{color:n,textColor:a=n,textOpacity:r,backgroundColor:i=a,backgroundOpacity:o}=e,{array:d}=this,{strideByteSize:c}=this.metadata;{let e=t*c+4;if(void 0!==a){let{r:t,g:n,b:r}=(0,l.E)(a);d[e+0]=255*t,d[e+1]=255*n,d[e+2]=255*r}void 0!==r&&(d[e+3]=(0,s.UM)(r))}{let e=t*c+8;if(void 0!==i){let{r:t,g:n,b:a}=(0,l.E)(i);d[e+0]=255*t,d[e+1]=255*n,d[e+2]=255*a}void 0!==o&&(d[e+3]=(0,s.UM)(o))}return this}setTextAt(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{trim:a=!1,size:r=1,...i}=n;this.setColorAt(t,i),this.setSizeAt(t,r);let{array:o}=this,{symbols:l,lineCount:s,lineLength:d,strideByteSize:c,strideHeaderByteSize:u}=this.metadata,h=(a?e.trim():e).split("\n");h.length>s&&(console.warn("TextHelper: Text has more lines than ".concat(s,", truncating.")),h=h.slice(0,s)),h=h.map(t=>(a&&(t=t.trim()),t.length>d)?(console.warn("TextHelper: Line length is greater than ".concat(d," characters, clamping.")),t.slice(0,d)):t),o[t*c+0]=h.length;let x=t*c,v=h.length;for(let t=0;t<s;t++){let e=0;t<v&&(o[x+16+4*t]=h[t].length,e=h[t].length);let n=x+u+t*d;for(let a=0;a<d;a++){let r=n+a;if(t>=v||a>=e)o[r]=0;else{let e=l.indexOf(h[t].charAt(a));o[r]=-1===e?0:e}}}}constructor(t,e,n,a,{defaultColor:r="#ff00ff",defaultTextOpacity:i=1,defaultBackgroundOpacity:o=0}={}){let d=16+4*n,c=d+4*Math.ceil(n*a/4),u=Math.ceil((d+e*c)/4),h=(0,s.h3)(Math.sqrt(u)),x=Math.ceil(u/h);this.metadata={symbols:t,textCount:e,lineCount:n,lineLength:a,strideHeaderByteSize:d,strideByteSize:c,textureWidth:h,textureHeight:x};let v=new Uint8Array(h*x*4),{r:f,g,b:y}=(0,l.E)(r);for(let t=0;t<e;t++){let e=t*c;v[(e+=4)+0]=255*f,v[e+1]=255*g,v[e+2]=255*y,v[e+3]=255*i,v[(e+=4)+0]=255*f,v[e+1]=255*g,v[e+2]=255*y,v[e+3]=255*o}this.array=v}}(a=r||(r={}))[a.Normal=0]="Normal",a[a.Billboard=1]="Billboard";let h={textCount:1e3,lineLength:24,lineCount:2,charSize:new i.Vector2(.2,.3),textSize:1,orientation:1},x=0;class v extends i.InstancedMesh{setData(t){return this.data=t,this.dataTexture.image.data=t.array,this.dataTexture.needsUpdate=!0,this}setTextAt(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.data.setTextAt(t,e,n),this.dataTexture.needsUpdate=!0,this.setMatrixAt(t,(0,l.$)(n)),this.instanceMatrix.needsUpdate=!0,this}setColorAt(t,e){this.data.setColorAt(t,{color:e}),this.dataTexture.needsUpdate=!0}setTextColorAt(t,e){return this.data.setColorAt(t,e),this.dataTexture.needsUpdate=!0,this}getDataStringView(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;return function(t,e,n,a,r){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:3,l=Array.from({length:e.length/4},(t,n)=>{let a=4*n,r=e[a+0];return[r,e[a+1],e[a+2],e[a+3]]}).slice(i*n/4,o*n/4),s=[];s.push("\nData texture array (".concat(e.length," bytes):")),s.push("\ndataStride: ".concat(n," (").concat(n/4," x 4 bytes)"));let d=4+a;for(let e=0;e<l.length;e++){let i=e%(n/4);0===i&&(s.push("\npack #".concat(e/(n/4))),s.push("info:")),4===i&&s.push("lines (".concat(a,"):")),i===d&&s.push("chars (".concat(r,"):"));let[o,c,u,h]=l[e],x="".concat(e.toString().padEnd(3)," - ").concat((4*e).toString().padEnd(4),":   ").concat(o.toString().padStart(3),", ").concat(c.toString().padStart(3),", ").concat(u.toString().padStart(3),", ").concat(h.toString().padStart(3));i>=d&&(x+="     ".concat(t.symbols[o]).concat(t.symbols[c]).concat(t.symbols[u]).concat(t.symbols[h])),s.push("  "+x)}return s.join("\n")}(this.atlas,this.data.array,this.data.strideByteSize,this.options.lineCount,this.options.lineLength,t,e)}constructor(t){let e=new c,n={...h,...t},a=new i.Vector2(n.textSize*n.lineLength*n.charSize.x,n.textSize*n.lineCount*n.charSize.y),r=new i.PlaneGeometry(a.width,a.height),l=new u(e.symbols,n.textCount,n.lineCount,n.lineLength),s=new i.DataTexture(l.array,l.textureSize.width,l.textureSize.height,i.RGBAFormat,i.UnsignedByteType);s.needsUpdate=!0;let d=new i.MeshBasicMaterial({map:e.texture,transparent:!0,alphaTest:.5,side:i.DoubleSide});d.name="TextHelperMaterial",d.onBeforeCompile=t=>o.b.with(t).uniforms({uOrientation:{value:n.orientation},uPlaneSize:{value:a},uCharSize:{value:n.charSize},uLineLength:{value:n.lineLength},uLineCount:{value:n.lineCount},uAtlasCharGrid:{value:e.charGrid},uDataStrideHeader:{value:l.strideHeaderByteSize},uDataStride:{value:l.strideByteSize/4},uDataTexture:{value:s},uDataTextureSize:{value:l.textureSize},uBoxBorderWidth:{value:0}}).varying({vInstanceId:"float",vTextColor:"vec4",vBackgroundColor:"vec4",vCurrentLineCount:"float"}).top("\n        vec4 getData4(int instanceId, int offset) {\n          int width = int(uDataTextureSize.x);\n          int index = instanceId * int(uDataStride) + offset;\n          int dataY = index / width;\n          int dataX = index - dataY * width;\n          return texelFetch(uDataTexture, ivec2(dataX, dataY), 0);\n        }\n        vec4 getData4(float instanceId, int offset) {\n          return getData4(int(instanceId), offset);\n        }\n          \n        vec2 getCharOffset(float instanceId, float charIndex) {\n          int p = int(uDataStrideHeader + charIndex);\n          int q = p / 4;\n          int r = p - q * 4; // p % 4;\n          vec4 charIndexes = getData4(instanceId, q);\n          float i = charIndexes[r] * 255.0;\n          float x = mod(i, uAtlasCharGrid.x);\n          float y = floor(i / uAtlasCharGrid.x);\n          return vec2(x, uAtlasCharGrid.y - y - 1.0) / uAtlasCharGrid;\n        }\n        vec2 getCharOffset(float instanceId, float line, float char) {\n          // return vec2(line * 82.0 + char, 0.0) / uAtlasCharGrid;\n          return getCharOffset(instanceId, line * uLineLength + char);\n        }\n      ").vertex.replace("project_vertex","\n        vec4 infoTexel = getData4(gl_InstanceID, 0);\n        vCurrentLineCount = infoTexel.r * 255.0;\n\n        vTextColor = getData4(gl_InstanceID, 1);\n        vBackgroundColor = getData4(gl_InstanceID, 2);\n\n        vec4 sizeBytes = getData4(gl_InstanceID, 3) * 255.0;\n        uint encoded =\n          uint(sizeBytes.x) << 24 |\n          uint(sizeBytes.y) << 16 |\n          uint(sizeBytes.z) << 8  |\n          uint(sizeBytes.w);\n        float size = uintBitsToFloat(encoded);\n\n        vec4 mvPosition = vec4(transformed * size, 1.0);\n\n        mat4 localMatrix = instanceMatrix;\n\n        if (uOrientation == 1.0) {\n          mat3 v = mat3(viewMatrix);\n          v = inverse(v);\n          localMatrix = mat4(v);\n          localMatrix[3] = vec4(instanceMatrix[3].xyz, 1.0);\n        }\n\n        mvPosition = viewMatrix * modelMatrix * localMatrix * mvPosition;\n\n        gl_Position = projectionMatrix * mvPosition;\n\n        vInstanceId = float(gl_InstanceID);\n      ").fragment.top("\n        float sdBox(in vec2 p, in vec2 b) {\n          vec2 d = abs(p) - b;\n          return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n        }\n\n        vec4 getCharColor() {\n          vec2 uv = vMapUv * vec2(uLineLength, uLineCount);\n\n          uv.y += (uLineCount - vCurrentLineCount) * 0.5;\n          float lineIndex = floor((uLineCount - uv.y));\n\n          if (lineIndex < 0.0 || lineIndex >= vCurrentLineCount)\n            discard;\n\n          float currentLineLength = getData4(vInstanceId, 4 + int(lineIndex)).r * 255.0;\n          // vec2 ddx = dFdx(uv);\n          // vec2 ddy = dFdy(uv);\n          uv.x += (uLineLength - currentLineLength) * -0.5;\n          float charIndex = floor(uv.x);\n\n          if (charIndex < 0.0 || charIndex >= currentLineLength)\n            discard;\n\n          uv = fract(uv);\n          // diffuseColor = vec4(uv, 1.0, 1.0);\n          uv /= uAtlasCharGrid;\n\n          uv += getCharOffset(vInstanceId, lineIndex, charIndex);\n          // float lod = log2(max(length(dFdx(vMapUv)), length(dFdy(vMapUv))));\n          vec4 charColor = textureLod(map, uv, 0.0);\n          // Use textureGrad for better quality, when the square texture will be used\n          // vec4 sampledDiffuseColor = textureGrad(map, uv, ddx, ddy);\n          float char = charColor.r;\n          \n          return vec4(\n            mix(vBackgroundColor.rgb, vTextColor.rgb, charColor.r),\n            mix(vBackgroundColor.a, vTextColor.a, charColor.r));\n        }\n\n        vec4 getCharColorWithBorder() {\n          if (uBoxBorderWidth > 0.0) {\n            vec2 p = (vMapUv - 0.5) * uPlaneSize;\n            float d = sdBox(p, uPlaneSize * 0.5) + uBoxBorderWidth;\n            if (d > 0.0) {\n              return vTextColor;\n            }\n          }\n          return getCharColor();\n        }\n      ").fragment.replace("map_fragment","\n        diffuseColor = getCharColorWithBorder();\n      "),super(r,d,n.textCount),this.textHelperId=x++,this.frustumCulled=!1,this.layers,this.options=n,this.atlas=e,this.data=l,this.dataTexture=s,this.derived={planeSize:a}}}v.defaultOptions=h,v.Orientation=r,v.Atlas=c,v.Data=u},85705:function(t,e,n){n.d(e,{$:function(){return o},E:function(){return s}});var a=n(88780),r=n(32219);let i=new a.Matrix4;function o(t){return(0,r.Xe)(t,i)}let l=new a.Color;function s(t){return l.set(t)}}}]);