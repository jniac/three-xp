"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6604],{1029:(n,e,t)=>{t.d(e,{N:()=>r});let a={vecX:["float","vec2","vec3","vec4"]},r=(n,e)=>{let t=[],r=Array.isArray(n)?n:[n].map(n=>n in a?a[n]:n).flat();if("function"==typeof e)for(let n of r)t.push(e(n).replaceAll(/\bT\b/g,n));else for(let n of r)t.push(e.replaceAll(/\bT\b/g,n));return t.join("\n")}},8144:(n,e,t)=>{t.d(e,{H:()=>o});var a=t(65927),r=t(1029);let o="\n".concat(a.S,"\n\n#ifndef GLSL_UTILS\n#define GLSL_UTILS\n\nfloat sin01(float x) {\n  return 0.5 + 0.5 * sin(x * 6.283185307179586);\n}\n\nvec2 scaleAround(vec2 p, vec2 c, float s) {\n  return c + (p - c) / s;\n}\n\n// Same as mix, but clamped.\n").concat((0,r.N)("vecX","\n  T lerp(in T a, in T b, in float x) {\n    return mix(a, b, clamp01(x));\n  }\n"),"\n\nfloat inverseLerpUnclamped(in float a, in float b, float x) {\n  return (x - a) / (b - a);\n}\n\nfloat inverseLerp(in float a, in float b, float x) {\n  return clamp01((x - a) / (b - a));\n}\n\nfloat remap(in float x, in float a, in float b, in float c, in float d) {\n  return c + (d - c) * inverseLerp(a, b, x);\n}\n\n// Remap from [-1, 1] to [0, 1]\nfloat remap1101(in float x) {\n  return clamp01(0.5 + 0.5 * x);\n}\n\n").concat((0,r.N)("vecX","\n  T oneMinus(in T x) {\n    return 1.0 - x;\n  }\n"),"\n\n// Returns x^p, but handles negative x values correctly.\nfloat spow(in float x, in float p) {\n  return x >= 0.0 ? pow(x, p) : -pow(-x, p);\n}\n\nfloat threshold(in float x, in float thresholdValue) {\n  return x < thresholdValue ? 0. : 1.;\n}\n\nfloat threshold(in float x, in float thresholdValue, in float width) {\n  return width < 1e-9 \n    ? (x < thresholdValue ? 0. : 1.)\n    : clamp01((x - thresholdValue + width * .5) / width);\n}\n\nmat3 extractRotation(mat4 matrix) {\n  return mat3(matrix[0].xyz, matrix[1].xyz, matrix[2].xyz);\n}\n\nvec2 rotate(vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  float x = c * p.x + s * p.y;\n  float y = -s * p.x + c * p.y;\n  return vec2(x, y);\n}\n\nvec2 rotateAround(vec2 p, float a, vec2 c) {\n  return c + rotate(p - c, a);\n}\n\nvec2 rotateScaleAround(vec2 p, float a, float s, vec2 c) {\n  return c + rotate((p - c) / s, a);\n}\n\nfloat positiveModulo(float x) {\n  x = mod(x, 1.0);\n  return x < 0.0 ? x + 1.0 : x;\n}\n\n// Modulo that keeps the result in the range [0, modulo]\nfloat positiveModulo(float x, float modulo) {\n  x = mod(x, modulo);\n  return x < 0.0 ? x + modulo : x;\n}\n\n// Modulo that keeps the result in the range [-m/2, m/2]\nfloat middleModulo(float x, float modulo) {\n  x = mod(x, modulo);\n  return x < -modulo / 2.0 ? x + modulo : x > modulo / 2.0 ? x - modulo : x;\n}\n\n// Limit a value to a maximum that the function tends to reach when x -> âˆž\n// https://www.desmos.com/calculator/0vewkbnscu\nfloat limited(float x, float maxValue) {\n  return x <= 0.0 ? x : maxValue * x / (maxValue + x);\n}\n\n// https://www.desmos.com/calculator/0vewkbnscu\nfloat limited(float x, float minValue, float maxValue) {\n  float d = maxValue - minValue;\n  float xd = x - minValue;\n  return x <= minValue ? x : minValue + d * xd / (d + xd);\n}\n\nfloat sqLength(in vec2 p) {\n  return p.x * p.x + p.y * p.y;\n}\n\nfloat sqLength(in vec3 p) {\n  return p.x * p.x + p.y * p.y + p.z * p.z;\n}\n\nfloat pcurve(float x, float a, float b) {\n  float k = pow(a + b, a + b) / (pow(a, a) * pow(b, b));\n  return k * pow(x, a) * pow(1.0 - x, b);\n}\n\nfloat hash(float p) {\n  return fract(sin(p * 12.9898) * 43758.5453);\n}\n\nfloat hash(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat hash(vec3 p) {\n  return fract(sin(dot(p, vec3(12.9898, 78.233, 45.164))) * 43758.5453);\n}\n\nfloat hash(vec4 p) {\n  return fract(sin(dot(p, vec4(12.9898, 78.233, 45.164, 94.673))) * 43758.5453);\n}\n\nvec2 hash2(float p) {\n  return vec2(hash(p), hash(p + 1.0));\n}\n\nvec2 hash2(vec2 p) {\n  return vec2(hash(p.x), hash(p.y));\n}\n\nvec2 hash2(vec3 p) {\n  return vec2(hash(p.xy), hash(p.yz));\n}\n\nvec2 hash2(vec4 p) {\n  return vec2(hash(p.xyz), hash(p.yzw));\n}\n\nvec3 hash3(float p) {\n  return vec3(hash2(p),  hash(p + 2.0));\n}\n\nvec3 hash3(vec2 p) {\n  return vec3(hash2(p), hash(p));\n}\n\nvec3 hash3(vec3 p) {\n  return vec3(hash(p.x), hash(p.y), hash(p.z));\n}\n\nvec3 hash3(vec4 p) {\n  return vec3(hash(p.xy), hash(p.yz), hash(p.zw));\n}\n\nfloat hash_alt(float p) {\n  return fract(sin(p * 127.1) * 311.7);\n}\n\nfloat hash_alt(vec2 p) {\n  return fract(sin(dot(p, vec2(127.1, 311.7))) * 269.5);\n}\n\nfloat hash_alt(vec3 p) {\n  return fract(sin(dot(p, vec3(127.1, 311.7, 74.7))) * 269.5);\n}\n\nfloat hash_alt(vec4 p) {\n  return fract(sin(dot(p, vec4(127.1, 311.7, 74.7, 113.5))) * 269.5);\n}\n\n").concat((0,r.N)("vecX","\n  T min3(in T a, in T b, in T c) {\n    return min(min(a, b), c);\n  }\n"),"\n\n").concat((0,r.N)("vecX","\n  T min4(in T a, in T b, in T c, in T d) {\n    return min(min(a, b), min(c, d));\n  }\n"),"\n\n#endif // GLSL_UTILS\n")},13565:(n,e,t)=>{t.d(e,{q:()=>d});var a=t(28535),r=t(76999),o=t(57368),u=t(49797),l=t(93432),i=t(8144),c=t(96122);let s=[3,5,7,9,11].map(n=>(function(n,e){let t=function(n,e){if(n%2==0)throw Error("Kernel size must be odd");let t=Math.floor(n/2);null!=e||(e=n/3);let a=2*e*e,r=[],o=0;for(let n=-t;n<=t;n++)for(let e=-t;e<=t;e++){let t=Math.exp(-(e*e+n*n)/a);r.push(t),o+=t}for(let n=0;n<r.length;n++)r[n]/=o;return r}(n,void 0),a=[];for(let e=0;e<n;e++){let r=t.slice(e*n,(e+1)*n).map(n=>"  ".concat(n.toFixed(5))).join(", ");a.push(r)}let r="kernel".concat(n,"x").concat(n),o="const float[".concat(n*n,"] ").concat(r," = float[").concat(n*n,"](\n").concat(a.join(",\n"),");"),u=Math.floor(n/2);return o+"\n\n"+(0,c.T)("\n    vec4 gaussianBlur".concat(n,"x").concat(n,"(vec2 uv, float scale) {\n      vec2 texelSize = scale / uTextureSize;\n      vec4 color = vec4(0.0);\n      for (int x = -").concat(u,"; x <= ").concat(u,"; x++) {\n        for (int y = -").concat(u,"; y <= ").concat(u,"; y++) {\n          vec2 offset = vec2(float(x), float(y)) * texelSize;\n          color += texture2D(uTexture, uv + offset) * ").concat(r,"[x + ").concat(u," + (y + ").concat(u,") * ").concat(n,"];\n        }\n      }\n      return color;\n    }\n\n    vec4 gaussianBlur").concat(n,"x").concat(n,"(vec2 uv) {\n      return gaussianBlur").concat(n,"x").concat(n,"(uv, 1.0);\n    }\n  "))})(n)).join("\n\n"),f={glsl_utils:i.H,glsl_sdf_2d:"\n  // 2D SDF functions\n  float sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n  }\n\n  float sdRoundedSegment(in vec2 p, in vec2 a, in vec2 b, float r) {\n    return sdSegment(p, a, b) - r;\n  }\n",glsl_blur_3_11:s},v={fragmentTop:"",fragmentColor:"\n    gl_FragColor = vec4(vUv, 1., 1.);\n  ",texture:null,uniforms:{}};class h extends u.BKk{constructor(n,e){let t={...v,...e},a={...{uTexture:{value:null},uTextureSize:{value:new u.I9Y},uTime:{value:0},uDeltaTime:{value:0}},...t.uniforms},r=Array.from(n).map(n=>f[n]).filter(n=>!!n).join("\n\n");a.uTexture.value=t.texture,super({uniforms:a,vertexShader:"\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = vec4(position, 1.);\n        }\n      ",fragmentShader:"\n        varying vec2 vUv;\n        uniform sampler2D uTexture;\n        uniform vec2 uTextureSize;\n        uniform float uTime;\n        uniform float uDeltaTime;\n\n        ".concat(r,"\n\n        ").concat(Object.entries(t.uniforms).map(n=>{let[e,{value:t}]=n,a=function n(e){if(Array.isArray(e)){if(0===e.length)throw Error("GpuCompute: cannot infer uniform type for empty array");let t=n(e[0]);for(let a=1;a<e.length;a++)if(n(e[a])!==t)throw Error("GpuCompute: cannot infer uniform type for array with mixed types");return"".concat(t,"[").concat(e.length,"]")}if("number"==typeof e)return"float";if(e instanceof u.I9Y)return"vec2";if(e instanceof u.Pq0)return"vec3";if(e instanceof u.IUQ)return"vec4";if(e instanceof u.Q1f)return"vec3";if(e instanceof u.gPd)return"sampler2D";throw Error("GpuCompute: cannot infer uniform type for value: ".concat(e))}(t);return"uniform ".concat(a," ").concat(e,";")}).join("\n"),"\n\n        ").concat(t.fragmentTop,"\n\n        void main() {\n          ").concat(t.fragmentColor,"\n        }\n      ")}),this.uniforms=a}}let p={size:1024,type:u.ix0};var x=new WeakMap,m=new WeakMap;class d{get initialized(){return!!(0,a._)(this,x)}get renderer(){var n;return null==(n=(0,a._)(this,x))?void 0:n.renderer}get updateUniforms(){if(!this.state.updateMaterial)throw Error("GpuCompute: shaders not set");return this.state.updateMaterial.uniforms}enableGlslLib(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];for(let n of e)f[n]?(0,a._)(this,m).add(n):console.warn("GpuCompute: unknown glsl lib: ".concat(n));return this}shaders(n){return this.state.initialMaterial=new h((0,a._)(this,m),n.initial),this.state.updateMaterial=new h((0,a._)(this,m),n.update),this}initialize(n){let{orthoCamera:e,plane:t}=this.parts,{rtA:a}=this.state;(0,o._)(this,x,{renderer:n});let{initialMaterial:r}=this.state;return r&&(r.uniforms.uTextureSize.value.copy(this.state.size),r.uniforms.uTexture.value=null,r.uniforms.uTime.value=0,r.uniforms.uDeltaTime.value=0,t.material=r),n.setRenderTarget(a),n.render(t,e),n.setRenderTarget(null),this.state.frame=0,this}update(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;if(!(0,a._)(this,x))throw Error("GpuCompute: not initialized");let{renderer:e}=(0,a._)(this,x),{orthoCamera:t,plane:r}=this.parts,{rtA:o,rtB:u,time:l,frame:i,updateMaterial:c}=this.state;return this.state.time+=n,c&&(c.uniforms.uTextureSize.value.copy(this.state.size),c.uniforms.uTexture.value=i%2==0?o.texture:u.texture,c.uniforms.uTime.value=l,c.uniforms.uDeltaTime.value=n,c.needsUpdate=!0,r.material=c),e.setRenderTarget(i%2==0?u:o),e.render(r,t),e.setRenderTarget(null),this.state.frame+=1,this}currentTexture(){return this.state.frame%2==0?this.state.rtA.texture:this.state.rtB.texture}constructor(n){(0,r._)(this,x,{writable:!0,value:void 0}),(0,r._)(this,m,{writable:!0,value:void 0}),this.parts={orthoCamera:new u.qUd(-1,1,1,-1,0,1),plane:new u.eaF(new u.bdM(2,2),void 0)},(0,o._)(this,m,new Set);let e={...p,...n};this.params=e;let{type:t}=e,a=(0,l.wX)(e.size),i=new u.nWS(a.width,a.height,{minFilter:u.hxR,magFilter:u.hxR,format:u.GWd,type:t}),c=new u.nWS(a.width,a.height,{minFilter:u.hxR,magFilter:u.hxR,format:u.GWd,type:t});i.texture.name="GpuCompute.rtA",c.texture.name="GpuCompute.rtB",this.state={size:a,rtA:i,rtB:c,time:0,frame:0}}}},26604:(n,e,t)=>{t.d(e,{W:()=>r});var a=t(13565);class r extends a.q{constructor(n){super(n),this.enableGlslLib("glsl_utils"),this.shaders({initial:{fragmentColor:"\n          vec2 uv = vUv;\n          float r = step(0.9, hash(uv));\n          float g = step(0.9, hash(uv + vec2(1.0, 0.0)));\n          float b = step(0.9, hash(uv + vec2(0.0, 1.0)));\n          gl_FragColor = vec4(r, g, b, 1.0);\n        "},update:{fragmentTop:"\n          // Conway's Game of Life rules\n          float gameOfLife(float current, float sum) {\n            if (current > 0.5) {\n              if (sum < 1.5 || sum > 3.5) {\n                return 0.0; // Cell dies\n              } else {\n                return 1.0; // Cell lives\n              }\n            } else {\n              if (sum == 3.0) {\n                return 1.0; // Cell becomes alive\n              }\n            }\n            return current;\n          }\n          ",fragmentColor:'\n          vec2 uv = vUv;\n          vec2 uv0 = uv + vec2(0.0, 1.0) / uTextureSize;\n          vec2 uv1 = uv + vec2(1.0, 1.0) / uTextureSize;\n          vec2 uv2 = uv + vec2(1.0, 0.0) / uTextureSize;\n          vec2 uv3 = uv + vec2(1.0, -1.0) / uTextureSize;\n          vec2 uv4 = uv + vec2(0.0, -1.0) / uTextureSize;\n          vec2 uv5 = uv + vec2(-1.0, -1.0) / uTextureSize;\n          vec2 uv6 = uv + vec2(-1.0, 0.0) / uTextureSize;\n          vec2 uv7 = uv + vec2(-1.0, 1.0) / uTextureSize;\n          vec3 sum =\n            texture2D(uTexture, uv0).rgb +\n            texture2D(uTexture, uv1).rgb +\n            texture2D(uTexture, uv2).rgb +\n            texture2D(uTexture, uv3).rgb +\n            texture2D(uTexture, uv4).rgb +\n            texture2D(uTexture, uv5).rgb +\n            texture2D(uTexture, uv6).rgb +\n            texture2D(uTexture, uv7).rgb;\n    \n          vec3 current = texture2D(uTexture, uv).rgb;\n          vec3 next = vec3(\n            gameOfLife(current.r, sum.r),\n            gameOfLife(current.g, sum.g),\n            gameOfLife(current.b, sum.b));\n          \n          // Add some random "glitches" based on time and position\n          vec3 uvt = vec3(uv, uTime);\n          vec3 extra = vec3(\n            step(0.995, hash(uvt.xyz)), \n            step(0.995, hash(uvt.yzx)), \n            step(0.995, hash(uvt.zxy)));\n    \n          gl_FragColor.rgb = max(next, extra);\n        '}})}}},65927:(n,e,t)=>{t.d(e,{S:()=>a});let a="\n#ifndef GLSL_BASIC\n#define GLSL_BASIC\n\nfloat clamp01(float x) {\n  return x < 0.0 ? 0.0 : x > 1.0 ? 1.0 : x;\n}\n\n#endif\n"},96122:(n,e,t)=>{t.d(e,{T:()=>a});function a(n){let e=n.split("\n"),t=0;for(let n of e){let e=n.match(/^(\s*)\S/);if(e){t=e[1].length;break}}return e.map(n=>n.slice(Math.min(n.length,t))).join("\n")}}}]);