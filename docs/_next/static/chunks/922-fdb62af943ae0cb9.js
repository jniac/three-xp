"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[922],{4922:function(e,n,t){t.d(n,{Main:function(){return ea}});var r=t(7504),a=t(257),o=t(6935),i=t(2983),l=t(1463);let c=["common","uv_pars_vertex","displacementmap_pars_vertex","color_pars_vertex","fog_pars_vertex","normal_pars_vertex","morphtarget_pars_vertex","skinning_pars_vertex","shadowmap_pars_vertex","logdepthbuf_pars_vertex","clipping_planes_pars_vertex","uv_vertex","color_vertex","morphcolor_vertex","beginnormal_vertex","morphnormal_vertex","skinbase_vertex","skinnormal_vertex","defaultnormal_vertex","normal_vertex","begin_vertex","morphtarget_vertex","skinning_vertex","displacementmap_vertex","project_vertex","logdepthbuf_vertex","clipping_planes_vertex","worldpos_vertex","shadowmap_vertex","fog_vertex","common","packing","dithering_pars_fragment","color_pars_fragment","uv_pars_fragment","map_pars_fragment","alphamap_pars_fragment","alphatest_pars_fragment","alphahash_pars_fragment","aomap_pars_fragment","lightmap_pars_fragment","emissivemap_pars_fragment","iridescence_fragment","cube_uv_reflection_fragment","envmap_common_pars_fragment","envmap_physical_pars_fragment","fog_pars_fragment","lights_pars_begin","normal_pars_fragment","lights_physical_pars_fragment","transmission_pars_fragment","shadowmap_pars_fragment","bumpmap_pars_fragment","normalmap_pars_fragment","clearcoat_pars_fragment","iridescence_pars_fragment","roughnessmap_pars_fragment","metalnessmap_pars_fragment","logdepthbuf_pars_fragment","clipping_planes_pars_fragment","clipping_planes_fragment","logdepthbuf_fragment","map_fragment","color_fragment","alphamap_fragment","alphatest_fragment","alphahash_fragment","roughnessmap_fragment","metalnessmap_fragment","normal_fragment_begin","normal_fragment_maps","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","emissivemap_fragment","lights_physical_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","aomap_fragment","transmission_fragment","opaque_fragment","tonemapping_fragment","colorspace_fragment","fog_fragment","premultiplied_alpha_fragment","dithering_fragment"];var s=t(2773);class m{static from(e,n){if(n instanceof s.Observable){if("number"==typeof n.value)return new m(e,n);throw Error("Observable value must be a number")}let t=typeof n;return"object"===t&&n.constructor===Object&&"value"in n?new m(e,n):"string"===t?new m(e,{value:new i.Ilk(n)}):new m(e,{value:n})}get value(){return this.target.value}computeDeclaration(){let e=this.name,n=this.target.value;if("number"==typeof n)return"uniform float ".concat(e,";");if(n.isVector2)return"uniform vec2 ".concat(e,";");if(n.isVector3||n.isColor)return"uniform vec3 ".concat(e,";");if(n.isVector4||n.isQuaternion)return"uniform vec4 ".concat(e,";");if(n.isMatrix3)return"uniform mat3 ".concat(e,";");if(n.isMatrix4)return"uniform mat4 ".concat(e,";");if(n.isTexture)return n.isCubeTexture?"uniform samplerCube ".concat(e,";"):"uniform sampler2D ".concat(e,";");if(n instanceof Float32Array)return"uniform float ".concat(e,"[").concat(n.length,"];");throw console.log("unhandled value:",n),Error('unhandled value: "'.concat(null==n?void 0:n.constructor.name,'"'))}constructor(e,n){this.name=e,this.target=n}}function p(){let e=(0,l._)(["","s*",""],["","\\s*",""]);return p=function(){return e},e}let f=null,d=e=>(f=e,b),u="// ShaderForge (injected code) ->",h="// <- ShaderForge",v=e=>"".concat(u,"\n").concat(e.trim(),"\n").concat(h),x=e=>{let n=e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),t=RegExp(String.raw(p(),n(h),n(u)),"g");return e.replaceAll(t,"")};class g{getPattern(e){let{throwError:n=!0}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t="#include <".concat(e,">"),r=this.type;if(n&&!1===f[r].includes(t))throw Error('"'.concat(t,'" is not present in the shader template program.'));return{pattern:t,type:r}}replace(e,n){let{type:t,pattern:r}=this.getPattern(e),a=v(n);return f[t]=f[t].replace(r,a),b}inject(e,n,t){let{type:r,pattern:a}=this.getPattern(n),o="after"===e?"".concat(a,"\n").concat(v(t)):"".concat(v(t),"\n").concat(a);return f[r]=f[r].replace(a,o),b}injectTokenComments(){for(let e of c){let{type:n,pattern:t}=this.getPattern(e,{throwError:!1});f[n]=f[n].replace(t,"\n        ".concat(t,"\n        // ShaderForge TOKEN: ").concat(e,"\n      "))}return b}header(e){let n=this.type;return f[n]="".concat(e,"\n").concat(f[n]),b}before(e,n){return this.inject("before",e,n)}after(e,n){return this.inject("after",e,n)}top(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return f[this.type]=f[this.type].replace("void main() {","\n      ".concat(v(n.join("\n\n")),"\n      void main() {\n    ")),b}mainBeforeAll(e){return f[this.type]=f[this.type].replace("void main() {","void main() {\n        ".concat(v(e))),b}mainAfterAll(e){return f[this.type]=f[this.type].replace(/}\s*$/,"\n      ".concat(v(e),"\n    }")),b}uniforms(e){if("string"==typeof e)this.top(e);else{let n=[];for(let[t,r]of Object.entries(e)){let e=m.from(t,r);n.push(e.computeDeclaration())}this.top(n.join("\n")),w(e)}return b}clean(){return f[this.type]=x(f[this.type]),b}printFinalCode(){return console.log(f[this.type].replace(/#include <(.*)>/g,(e,n)=>{let t=i.WdD[n];if(!t)throw Error('Shader chunk "'.concat(n,'" not found'));return t})),b}constructor(e){this.type=e}}let w=e=>{for(let[n,t]of Object.entries(e)){let e=m.from(n,t);if(n in f.uniforms){if(e.value!==f.uniforms[n].value)throw Error("Shader redefinition! (Uniform values are not equal)")}else f.uniforms[n]=e}return b},_=new g("fragmentShader"),y=new g("vertexShader"),b=Object.assign(function(e){return e&&d(e),b},{defines:e=>(f.defines?Object.assign(f.defines,e):f.defines=e,b),uniforms:e=>(y.uniforms(e),_.uniforms(e),b),varying:function(e){let n="";if("string"==typeof e)n=e;else{let t=[];for(let[n,r]of Object.entries(e))t.push("varying ".concat(r," ").concat(n,";"));n=t.join("\n")}return y.top(n),_.top(n),b},vertex:y,fragment:_,header:e=>(_.header(e),y.header(e),b),clean:()=>(_.clean(),y.clean(),b),with:d,wrap:(e,n)=>(e.onBeforeCompile=e=>{f=e},e)}),P=new i.Ilk;function k(e){let{r:n,g:t,b:r}=P.set(e);return"vec3(".concat(n.toFixed(3),", ").concat(t.toFixed(3),", ").concat(r.toFixed(3),")")}function C(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new i.Pa4;if("number"==typeof e)return n.set(e,e,e);if(Array.isArray(e)){let[t,r,a=0]=e;return n.set(t,r,a)}if("width"in e){let{width:t,height:r,depth:a}=e;return n.set(t,r,a)}let{x:t,y:r,z:a=0}=e;return n.set(t,r,a)}new i.Pa4,new i.USm,new i.Pa4,new i._fP,new i.Pa4(0,0,0),new i.USm(0,0,0,"XYZ"),new i.Pa4(1,1,1);let I={x:0,y:0,z:0,rotationX:0,rotationY:0,rotationZ:0,rotationOrder:"XYZ",scaleX:1,scaleY:1,scaleZ:1,scaleScalar:1,visible:!0};function z(e,n){let{x:t,y:r,z:a,position:o=new i.Pa4(t,r,a),rotationX:l,rotationY:c,rotationZ:s,rotationOrder:m,rotation:p=new i.USm(l,c,s,m),scaleX:f,scaleY:d,scaleZ:u,scaleScalar:h,scale:v=new i.Pa4(f,d,u).multiplyScalar(h),visible:x}={...I,...n};return C(o,e.position),function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new i.USm;if(Array.isArray(e)){let[t,r,a,o="XYZ"]=e;return n.set(t,r,a,o)}let{x:t,y:r,z:a,order:o="XYZ",useDegree:l=!1}=e,c=l?Math.PI/180:1;n.set(t*c,r*c,a*c,o)}(p,e.rotation),C(v,e.scale),e.visible=x,e}var S=t(7810),M=t(8470),T=t(519),V=t(8516);let j=new(t(3356)).x;function A(e){return new Promise(n=>{j.load(e,e=>{n(e)})})}let W=new V.I,E={vecX:["float","vec2","vec3","vec4"]},O=(e,n)=>{let t=[],r=Array.isArray(e)?e:[e].map(e=>e in E?E[e]:e).flat();if("function"==typeof n)for(let e of r)t.push(n(e).replaceAll(/\bT\b/g,e));else for(let e of r)t.push(n.replaceAll(/\bT\b/g,e));return t.join("\n")},F="\n\nstruct FloatRamp {\n  float a;\n  float b;\n  float t;\n};\n\nstruct Vec2Ramp {\n  vec2 a;\n  vec2 b;\n  float t;\n};\n\nstruct Vec3Ramp {\n  vec3 a;\n  vec3 b;\n  float t;\n};\n\nstruct Vec4Ramp {\n  vec4 a;\n  vec4 b;\n  float t;\n};\n\n".concat(O("vecX",e=>{let n=e[0].toUpperCase()+e.slice(1)+"Ramp";return"\n\n".concat(n," ramp(float t, T a, T b) {\n  return ").concat(n,"(a, b, t);\n}\n\n").concat(n," ramp(float t, T a, T b, T c) {\n  if (t < .5) {\n    return ").concat(n,"(a, b, t * 2.0);\n  } else {\n    return ").concat(n,"(b, c, (t - 0.5) * 2.0);\n  }\n}\n\n").concat(n," ramp(float t, T a, T b, T c, T d) {\n  if (t < .33) {\n    return ").concat(n,"(a, b, t * 3.0);\n  } else if (t < .66) {\n    return ").concat(n,"(b, c, (t - 0.33) * 3.0);\n  } else {\n    return ").concat(n,"(c, d, (t - 0.66) * 3.0);\n  }\n}\n\n").slice(1,-1)})),D="\n#ifndef GLSL_RAMP\n#define GLSL_RAMP\n".concat(S.i,"\n").concat(F,"\n#endif\n"),L={white:new i.Ilk("#ffffff"),grey10:new i.Ilk("#f0f0f0"),grey20:new i.Ilk("#e0e0e0"),notSoWhite:new i.Ilk("#f8f8e8"),yellow:new i.Ilk("#fff700"),black:new i.Ilk("#110111"),red:new i.Ilk("#dd1a41"),brightSkin:new i.Ilk("#ebd8c6"),petrol:new i.Ilk("#005e6b"),brightGreen:new i.Ilk("#22c891"),darkGreen:new i.Ilk("#002f1c"),sand:new i.Ilk("#e6db9f")};class U extends i.Kj0{static createMaterial(e){let{color:n,shaded:t,emissiveIntensity:r,side:a}={...U.defaultProps,...e};return t?new i.EJi({color:n,emissiveIntensity:r,emissive:r>0?n:void 0,side:a}):new i.vBJ({color:n})}}U.defaultProps={color:L.black,radius:1.3,align:.5,thickness:.3,innerRadiusRatio:null,shaded:!0,emissiveIntensity:.333};class R extends U{constructor(e){let{radius:n,thickness:t,align:r,innerRadiusRatio:a,color:o,shaded:l,...c}={...U.defaultProps,...e},s=n-t*r,m=n+t*(1-r);a&&(s=n*a,m=n),super(new i.o8S(s,m,128),U.createMaterial({...e,side:i.ehD})),z(this,c)}}class Z extends i.Kj0{constructor(e){let{radius:n,thickness:t,align:r,innerRadiusRatio:a,color:o,shaded:l,emissiveIntensity:c,...s}={...U.defaultProps,...e},m=n-t*r,p=n+t*(1-r);a&&(m=n*a,p=n),super(new i.XvJ((m+p)/2,(p-m)/2,128,512),U.createMaterial({...e,side:i.Wl3})),z(this,s)}}class B extends R{constructor(e){super(e),this.material.onBeforeCompile=e=>b.with(e).defines({USE_UV:""}).fragment.top(D).fragment.after("map_fragment","\n      vec2 p = vUv - 0.5;\n      float alpha = atan(p.y, p.x) / 6.2831853;\n      alpha = 1.0 - mod(alpha + 0.0, 1.0);\n      Vec3Ramp r = ramp(alpha,\n        ".concat(k(L.black),",\n        ").concat(k(L.white),",\n        ").concat(k(L.yellow),");\n      diffuseColor.rgb = mix(r.a, r.b, easeInOut4(r.t));\n    "))}}var N=t(3935);class J extends i.ZAu{constructor({globalIntensity:e=1,debug:n=!1}={}){super(),this.name="lights";let t=new i.vmT("#dbebf0","#645d61",e);this.add(t);let r=new i.T_f("#e8e6d3",1.3*e);r.position.set(10,10,10),r.width=40,r.height=40,r.lookAt(0,0,0),this.add(r),n&&this.add(new N.Z(r));let a=new i.Mig("#f2f0dd",.8*e);this.add(a)}}function X(e){let{precision:n=3}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=0,r=0,a=0;function o(){return"vec3(".concat(t.toFixed(n),", ").concat(r.toFixed(n),", ").concat(a.toFixed(n),")")}switch(typeof e){case"number":return t=(e>>16&255)/255,r=(e>>8&255)/255,a=(255&e)/255,o();case"string":if(e.startsWith("#")){if(4===e.length)return t=parseInt(e[1]+e[1],16)/255,r=parseInt(e[2]+e[2],16)/255,a=parseInt(e[3]+e[3],16)/255,o();return X(parseInt(e.slice(1),16),{precision:n})}throw Error("Invalid string: ".concat(e));case"object":if(Array.isArray(e))return[t,r,a]=e,o();if("r"in e)return t=e.r,r=e.g,a=e.b,o();if("x"in e)return t=e.x,r=e.y,a=e.z,o();throw Error("Invalid object: ".concat(e))}return"vec3(1.0, 0.0, 1.0)"}M.UM;let G="\n  ".concat(i.WdD.cube_uv_reflection_fragment,"\n  ").concat("\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n\n\n\n\n// 2D:\n\nvec3 mod289_2d(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289_2d(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute_2d(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289_2d(i); // Avoid truncation effects in permutation\n  vec3 p = permute_2d( permute_2d( i.y + vec3(0.0, i1.y, 1.0 ))\n		+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// 3D: \n\nfloat snoise(vec3 v)\n{ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n","\n\n  varying vec3 vPosition;\n  varying vec3 vWorldNormal;\n\n  struct Plane {\n    vec3 origin;\n    vec3 normal;\n  };\n\n  float signedDistanceToPlane(Plane plane, vec3 p) {\n    return dot(plane.normal, p - plane.origin);\n  }\n\n  vec3 checker3(vec3 position, float scale, float edgeWidth, vec3 color1, vec3 color2) {\n    // Scale the position to control the size of the checker cubes\n    vec3 scaledPos = position / scale;\n\n    // Get the integer part (checker grid location)\n    vec3 checkerPos = floor(scaledPos);\n\n    // Get the fractional part (inside each cube)\n    vec3 fractPos = fract(scaledPos);\n\n    // Calculate the checkerboard pattern (even/odd cubes)\n    float checkerSum = mod(checkerPos.x + checkerPos.y + checkerPos.z, 2.0);\n\n    // Smooth transition using smoothstep on the fractional position\n    float edgeX = smoothstep(0.0, edgeWidth, fractPos.x);\n    float edgeY = smoothstep(0.0, edgeWidth, fractPos.y);\n    float edgeZ = smoothstep(0.0, edgeWidth, fractPos.z);\n\n    // Combine the edges to create a smooth transition\n    float blend = edgeX * edgeY * edgeZ;\n    blend = smoothstep(0.0, edgeWidth, min(min(fractPos.x, fractPos.y), fractPos.z));\n    \n    // Interpolate between black and white with the smoothstep value\n    vec3 baseColor = checkerSum == 0.0 ? color1 : color2;\n    vec3 oppositeColor = checkerSum == 0.0 ? color2 : color1;\n\n    // Use the smooth transition to blend between colors\n    return mix(baseColor, oppositeColor, blend);\n  }\n\n  float sphereGrid(vec3 position, float scale, float edgeWidth) {\n    // Scale the position to control the size of the checker cubes\n    vec3 scaledPos = position / scale;\n\n    // Get the integer part (checker grid location)\n    vec3 checkerPos = floor(scaledPos);\n\n    // Get the fractional part (inside each cube)\n    vec3 fractPos = fract(scaledPos);\n\n    vec3 p = fractPos - 0.5;\n    float alpha = 1.0 - length(p) * 2.0;\n\n    return smoothstep(0.0, edgeWidth, alpha - 0.1);    \n  }\n\n  void main() {\n    vec3 p = vWorldNormal * 0.33;\n    float n1 = snoise(p * 6.0 * 0.2 + 0.2);\n    float n2 = snoise(p * 20.0 + 10.1);\n    float n3 = snoise(p * 40.0 + 10.1);\n    float n4 = snoise(p * 1400.0 + 13.1);\n    float n = n1 * 0.5;\n    n += pow(fract((n1 + n2 * 0.015 + n3 * 0.01 + n4 * 0.005) * 85.0), 4.0) * 0.5;\n    n += pow(fract((n1 + n2 * 0.015) * 85.0), 4.0) * 0.25;\n    n += n4 * 0.2;\n    n += 0.8;\n    n = pow(n, 0.3);\n    float alpha = n;\n\n    gl_FragColor.rgb = mix(").concat(X(L.white),", ").concat(X(L.brightSkin),", alpha);\n    gl_FragColor.a = 1.0;\n\n    // float x = sphereGrid(vPosition, 1.0, 0.01);\n    // gl_FragColor.rgb = mix(").concat(X(L.black),", ").concat(X(L.brightSkin),", x);\n    // gl_FragColor.rgb = checker3(vPosition, 1.0, 0.1, ").concat(X(L.black),", ").concat(X(L.brightSkin),");\n  }\n");class q extends i.Kj0{constructor({debug:e=!1}={}){super(new i.cJO(5.5,12),new i.jyz({depthWrite:!1,side:i._Li,vertexShader:"\n  varying vec3 vWorldNormal;\n  varying vec3 vPosition;\n\n  vec3 rotate(mat4 m, vec3 v) {\n    return vec3(\n      dot(v, vec3(m[0][0], m[1][0], m[2][0])),  // X component\n      dot(v, vec3(m[0][1], m[1][1], m[2][1])),  // Y component\n      dot(v, vec3(m[0][2], m[1][2], m[2][2]))   // Z component\n    );\n  }\n\n  void main() {\n    vPosition = position;\n    vWorldNormal = normalize(rotate(modelMatrix, position));\n\n    // gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    // Ignore the position, we only need the normal:\n    gl_Position = projectionMatrix * vec4(rotate(modelViewMatrix, position), 1.0);\n  }\n",fragmentShader:G,uniforms:{}})),e&&(this.material=new i.vBJ({depthWrite:!1,color:"white",wireframe:!0})),this.onBeforeRender=(e,n,t,r,a,o)=>{this.position.copy(t.position)},this.renderOrder=-1,this.frustumCulled=!1,this.name="a-sky"}}var Y=t(558);let K="\n  ".concat(Y.l,"\n\n  float sin01(float x) {\n    return 0.5 + 0.5 * sin(x * 6.283185307179586);\n  }\n\n  vec2 scaleAround(vec2 p, vec2 c, float s) {\n    return c + (p - c) / s;\n  }\n\n  // Same as mix, but clamped.\n  ").concat(O("vecX","\n    T lerp(in T a, in T b, in float x) {\n      return mix(a, b, clamp01(x));\n    }\n  "),"\n\n  float inverseLerpUnclamped(in float a, in float b, float x) {\n    return (x - a) / (b - a);\n  }\n\n  float inverseLerp(in float a, in float b, float x) {\n    return clamp01((x - a) / (b - a));\n  }\n\n  float threshold(in float x, in float thresholdValue) {\n    return x < thresholdValue ? 0. : 1.;\n  }\n\n  float threshold(in float x, in float thresholdValue, in float width) {\n    return width < 1e-9 \n      ? (x < thresholdValue ? 0. : 1.)\n      : clamp01((x - thresholdValue + width * .5) / width);\n  }\n\n  mat3 extractRotation(mat4 matrix) {\n    return mat3(matrix[0].xyz, matrix[1].xyz, matrix[2].xyz);\n  }\n\n  vec2 rotate(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    float x = c * p.x + s * p.y;\n    float y = -s * p.x + c * p.y;\n    return vec2(x, y);\n  }\n\n  vec2 rotateAround(vec2 p, float a, vec2 c) {\n    return c + rotate(p - c, a);\n  }\n\n  vec2 rotateScaleAround(vec2 p, float a, float s, vec2 c) {\n    return c + rotate((p - c) / s, a);\n  }\n  \n  float positiveModulo(float x) {\n    x = mod(x, 1.0);\n    return x < 0.0 ? x + 1.0 : x;\n  }\n\n  float positiveModulo(float x, float modulo) {\n    x = mod(x, modulo);\n    return x < 0.0 ? x + modulo : x;\n  }\n\n  // Limit a value to a maximum that the function tends to reach when x -> ∞\n  // https://www.desmos.com/calculator/0vewkbnscu\n  float limited(float x, float maxValue) {\n    return x <= 0.0 ? x : maxValue * x / (maxValue + x);\n  }\n\n  // https://www.desmos.com/calculator/0vewkbnscu\n  float limited(float x, float minValue, float maxValue) {\n    float d = maxValue - minValue;\n    float xd = x - minValue;\n    return x <= minValue ? x : minValue + d * xd / (d + xd);\n  }\n\n  float sqLength(in vec2 p) {\n    return p.x * p.x + p.y * p.y;\n  }\n\n  float sqLength(in vec3 p) {\n    return p.x * p.x + p.y * p.y + p.z * p.z;\n  }\n\n  ").concat(O("vecX","\n    T min3(in T a, in T b, in T c) {\n      return min(min(a, b), c);\n    }\n  "),"\n\n  ").concat(O("vecX","\n    T min4(in T a, in T b, in T c, in T d) {\n      return min(min(a, b), min(c, d));\n    }\n  "),"\n");class H extends i.Kj0{constructor(e){let{radius:n,...t}={...H.defaultProps,...e},r=new i.cJO(n,18),a=new i.EJi({});a.onBeforeCompile=e=>b.with(e).defines({USE_UV:""}).fragment.top(D).fragment.after("map_fragment","\n        vec2 p = vUv - 0.5;\n        float alpha = easeInOut(vUv.y, 1.6, 0.5);\n        Vec3Ramp r = ramp(alpha, ".concat(k(L.black),", ").concat(k(L.white),", ").concat(k(L.yellow),");\n        diffuseColor.rgb = mix(r.a, r.b, easeInOut3(r.t));\n      ")),super(r,a),z(this,t)}}H.defaultProps={radius:1};class ${set(e){this.props={...this.props,...e},this.props.center=this.props.center.clone(),this.props.normal=this.props.normal.clone().normalize(),this.props.binormal=this.props.binormal.clone().normalize()}update(e){let{radius:n,turnVelocity:t,turn:r,center:a,normal:o,binormal:i}=this.props,l=r+t*e;this.props.turn=l,this.target.position.copy(a).addScaledVector(o,n*Math.cos(l*Math.PI*2)).addScaledVector(i,n*Math.sin(l*Math.PI*2))}constructor(e,n){this.target=e,this.set({...$.defaultProps,...n})}}$.defaultProps={center:new i.Pa4,normal:new i.Pa4(1,0,0),binormal:new i.Pa4(0,1,0),radius:1,turnVelocity:1,turn:0};class Q extends i.Kj0{get satellite(){var e;return null!==(e=this._satellite)&&void 0!==e?e:this._satellite=new $(this)}constructor(e){let{radius:n,singleColor:t,emmissiveIntensity:r,lerpIn:a,lerpOut:o,...l}={...Q.defaultProps,...e},{colorTop:c=null!=t?t:Q.defaultProps.colorTop,colorBottom:s=null!=t?t:Q.defaultProps.colorBottom}={...e},m=new i.cJO(n,12),p=new i.EJi({color:c,emissive:s});p.onBeforeCompile=e=>{b.with(e).defines({USE_UV:""}).uniforms({uLerpIn:{value:a},uLerpOut:{value:o},uColorTop:{value:new i.Ilk(c)},uColorBottom:{value:new i.Ilk(s)}}).fragment.top(S.i,K).fragment.mainBeforeAll("\n          float alpha = inverseLerp(uLerpIn, uLerpOut, vUv.y);\n          vec3 sphereColor = mix(uColorBottom, uColorTop, easeInOut3(alpha));\n        ").fragment.after("map_fragment","\n          diffuseColor.rgb = sphereColor;\n        ").fragment.after("emissivemap_fragment","\n          totalEmissiveRadiance.rgb = sphereColor * ".concat(r.toFixed(2),";\n        "))},super(m,p),this._satellite=null,z(this,l)}}Q.defaultProps={radius:.225,singleColor:null,colorTop:L.white,colorBottom:L.yellow,emmissiveIntensity:.25,lerpIn:-.2,lerpOut:1.2};class ee extends i.Kj0{constructor(e){let n=new i.cJO(.4,12),t=new i.EJi({});t.onBeforeCompile=e=>b.with(e).varying({vWorldPosition:"vec3",vNormalWorld:"vec3",vViewDir:"vec3"}).vertex.mainAfterAll("\n        vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n        vNormalWorld = normalize(mat3(modelMatrix) * normal);\n        vViewDir = normalize(cameraPosition - vWorldPosition);\n      ").fragment.top(S.i,"\n\nfloat contrast(float mValue, float mScale, float mMidPoint) {\n	// Why clamp? If necessary, it has to be done outside of this function.\n	// return clamp((mValue - mMidPoint) * mScale + mMidPoint, 0.0, 1.0);\n	return (mValue - mMidPoint) * mScale + mMidPoint;\n}\n\nfloat contrast(float mValue, float mScale) {\n	return contrast(mValue, mScale, 0.5);\n}\n\nvec3 contrast(vec3 mValue, float mScale, float mMidPoint) {\n	return vec3(contrast(mValue.r, mScale, mMidPoint), contrast(mValue.g, mScale, mMidPoint), contrast(mValue.b, mScale, mMidPoint));\n}\n\nvec3 contrast(vec3 mValue, float mScale) {\n	return contrast(mValue, mScale, 0.5);\n}\n\nfloat greyscaleFloat(vec3 color) {\n	return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 greyscale(vec3 color) {\n    return vec3(greyscaleFloat(color));\n}\n\nvec3 greyscale(vec3 color, float alpha) {\n    return mix(color, greyscale(color), alpha);\n}\n\n").fragment.after("map_fragment","\n        float fresnel = dot(vNormalWorld, vViewDir);\n        vec3 inner = ".concat(k(L.white),";\n        vec3 outer = ").concat(k(L.black),";\n        float alpha = easeInOut(1.0 - pow(fresnel, 1.5), 2.0, 0.0);\n        diffuseColor.rgb = mix(inner, outer, alpha);\n      ")).fragment.mainAfterAll("\n        // Final tuning\n        gl_FragColor.rgb = mix(contrast(greyscale(gl_FragColor.rgb), 1.5), diffuseColor.rgb, alpha);\n      "),super(n,t),z(this,e)}}class en extends i.Kj0{constructor(e){let{color:n,thickness:t,length:r,shaded:a,...o}={...en.defaultProps,...e};super(new i.fHI(t/2,t/2,r,12,1).rotateZ(.5*Math.PI),a?new i.EJi({color:n}):new i.vBJ({color:n})),z(this,o)}}function et(e,n){return n.add(e),e}function*er(e,n){let t=yield*function*(e){let{ticker:n,scene:t}=e;n.set({activeDuration:180}),A("https://threejs.org/examples/textures/equirectangular/royal_esplanade_1k.hdr").then(n=>{new i.anP(e.renderer).fromEquirectangular(n).texture});let r=new i.ZAu;return t.add(r),yield()=>{r.removeFromParent()},r}(e);if(1===n.renderCount){let{camera:n}=e;n.fov=25,n.far=1e3,n.updateProjectionMatrix(),n.position.set(0,0,10)}t.add(new q),t.add(new J);let r=et(new H,t);t.add(new B({z:-1,radius:1.4,innerRadiusRatio:.805})),t.add(new Z({z:-1,radius:.75,thickness:.01,color:L.yellow,emissiveIntensity:1})),t.add(new Z({z:-1,radius:.8,thickness:.01,color:L.notSoWhite})),T.T.seed(6789402);let a=T.T.createPicker([[1,4],[2,2],[4,1]]);for(let{i:n}of function*(e){let n=0,t={get i(){return n},get t(){return n/8},get count(){return 8}};for(;n<8;n++)yield t}(8)){let r=T.T.pick(L),o=T.T.pick(L),l=new Q({z:-1,radius:.1*a(),colorTop:r,colorBottom:o});l.rotation.set(T.T.between(2*Math.PI),T.T.between(2*Math.PI),T.T.between(2*Math.PI)),t.add(l),l.satellite.set({radius:0===n?.875:T.T.between(.25,.75)*(0,M.t7)(1,1.5,n),center:new i.Pa4(0,0,-1-.4*n),turnVelocity:T.T.between(.05,.25)}),yield e.ticker.onTick(e=>{l.satellite.update(e.deltaTime)})}let o=new i.ZAu;o.rotation.z=-.25*Math.PI,t.add(o),o.add(new Q({x:-1.5,z:.5,singleColor:L.yellow})),o.add(new Z({x:-1.81,radius:.1,thickness:.01,color:L.notSoWhite}));let l=et(new Z({x:-2.315,radius:.2,thickness:.01,color:L.notSoWhite}),o);et(new en({x:-.2,thickness:.01,length:.4,shaded:!0,color:L.notSoWhite}),l),o.add(new Q({x:1.7,z:.5,lerpIn:0,lerpOut:1})),o.add(new Q({x:1.4,radius:.1,singleColor:L.black}));let c=et(new ee({x:2.3}),o);et(new Z({radius:.43,thickness:.015,color:L.black}),c),o.add(new en({x:1.5,thickness:.015,color:L.black}));let s=new i.ZAu;s.rotation.z=.25*Math.PI,t.add(s),s.add(new en({x:-1.6,thickness:.01,length:.35,shaded:!0,color:L.notSoWhite})),s.add(new en({x:1.6,thickness:.01,length:.35,shaded:!0,color:L.notSoWhite}));let m=new i.ZAu;m.rotation.y=.5*Math.PI,t.add(m),m.add(new en({x:-1.2,thickness:.01,length:.35,shaded:!0,color:L.notSoWhite})),m.add(new en({x:1.2,thickness:.01,length:.35,shaded:!0,color:L.notSoWhite})),(function(e){let n=e.split(".").pop();switch(n){case"hdr":return A(e);case"exr":return new Promise(n=>{W.load(e,e=>{n(e)})});default:return Promise.reject("Unsupported texture format: ".concat(n))}})("https://threejs.org/examples/textures/piz_compressed.exr").then(e=>{e.mapping=i.dSO,c.material.envMap=e,c.material.envMapIntensity=.25,c.material.envMapRotation.set(-.1*Math.PI,Math.PI,0),c.material.roughness=.3,c.material.metalness=.5,c.material.needsUpdate=!0,r.material.envMap=e,r.material.roughness=.2,r.material.envMapIntensity=.5,r.material.envMapRotation.set(-.1*Math.PI,Math.PI,0),r.material.needsUpdate=!0});let p=et(new i.ZAu,t);p.rotation.z=.25*Math.PI;class f extends i.ZAu{constructor(e){super();{let e=new i.fHI(15,15,5,6,1,!0).rotateY(Math.PI/6),n=new i.EJi({color:new i.Ilk("white").lerp(L.black,.995),side:i._Li,flatShading:!0});et(new i.Kj0(e,n),this)}{let e=new i.fHI(15,15,5,6,60,!0).rotateY(Math.PI/6),n=new i.EJi({color:L.black,wireframe:!0,flatShading:!0,side:i._Li});et(new i.Kj0(e,n),this)}z(this,e)}}et(new f({y:7.8}),p),et(new f({y:-7.8}),p)}function ea(){return(0,r.jsx)("div",{className:"wraps",children:(0,r.jsx)(a.V,{className:"bg-[#ddd]",children:(0,r.jsx)(o.hR,{children:(0,r.jsx)(o.kB,{fn:er})})})})}en.defaultProps={color:L.black,thickness:.01,shaded:!1,length:1}}}]);